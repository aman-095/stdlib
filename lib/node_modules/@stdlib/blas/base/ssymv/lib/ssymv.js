/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* eslint-disable */ // FIXME

'use strict';

// MODULES //

var max = require( '@stdlib/math/base/special/max' );

// MAIN //

/**
* Performs one of the matrix-vector operations `y = alpha*A*x + beta*y` where alpha and beta are scalars, x and y are n element vectors and A is an n by n symmetric matrix.
*
* @param {string} order - storage layout
* @param {string} uplo - specifies whether the upper or lower triangular part of the symmetric matrix `A` is being supplied
* @param {NonNegativeInteger} N - specifies the order of matrix `A`
* @param {number} alpha - scalar constant
* @param {Float32Array} A - matrix of coefficients
* @param {PositiveInteger} LDA - stride of the first dimension of `A` (a.k.a., leading dimension of the matrix `A`)
* @param {Float32Array} x - first input array
* @param {integer} strideX - `x` stride length
* @param {number} beta - scalar constant
* @param {Float32Array} y - second input array
* @param {integer} strideY - `y` stride length
* @returns {Float32Array} `y`
*
* @example
* var Float32Array = require( '@stdlib/array/float32' );
*
* var uplo = 'L';
* var order = 'row-major';
*
* var N = 3;
* var lda = 3;
*
* var alpha = 1.0;
* var beta = 0.0;
*
* var A = new Float32Array( [ 1.0, 0.0, 0.0, 2.0, 4.0, 0.0, 3.0, 5.0, 6.0 ] );
* var x = new Float32Array( [ 1.0, 1.0, 1.0 ] );
* var y = new Float32Array( [ 0.0, 0.0, 0.0 ] );
*
* ssymv( order, uplo, N, alpha, A, lda, x, 1, beta, y, 1 );
* // y => <Float32Array>[ 6.0, 11.0, 14.0 ]
*/
function ssymv( order, uplo, N, alpha, A, LDA, x, strideX, beta, y, strideY ) {
	var temp1;
	var temp2;
	var info;
	var ix;
	var iy;
	var jx;
	var jy;
	var kx;
	var ky;
	var i;
	var j;

	info = 0;
	if( uplo.toUpperCase() !== 'U' && uplo.toUpperCase() !== 'L' ) {
		info = 1;
	} else if( N < 0 ) {
		info = 2;
	} else if( LDA < max( 1, N ) ) {
		info = 5;
	} else if( strideX === 0 ) {
		info = 7;
	} else if( strideY === 0 ) {
		info = 10;
	}
	if( info !== 0 ) {
		throw new Error( 'ssymv()::invalid input argument. On input, argument ' + info + ' had an illegal value.' );
	}
	if( N === 0 || ( alpha === 0.0 && beta === 1.0 ) ) {
		return y;
	}
	if( strideX > 0 ) {
		kx = 0;
	} else {
		kx = ( 1 - N ) * strideX;
	}
	if( strideY > 0 ) {
		ky = 0;
	} else {
		ky = ( 1 - N ) * strideY;
	}
	// First form y = beta*y

	if( beta !== 1.0 ) {
		if( strideY === 1 ) {
			if( beta === 0.0 ) {
				for( i = 0; i < N; i++ ) {
					y[ i ] = 0.0;
				}
			} else {
				for( i = 0; i < N; i++ ) {
					y[ i ] *= beta;
				}
			}
		} else {
			iy = ky;
			if( beta === 0.0 ) {
				for( i = 0; i < N; i++ ) {
					y[ iy ] = 0.0;
					iy += strideY;
				}
			} else {
				for( i = 0; i < N; i++ ) {
					y[ iy ] *= beta;
					iy += strideY;
				}
			}
		}
	}
	if( alpha === 0.0 ) {
		return y;
	}
	if( uplo.toUpperCase() === 'U' ) {
		// Form y when A is stored in upper triangle

		if( strideX === 1 && strideY === 1 ) {
			for( j = 0; j < N; j++ ) {
				temp1 = alpha * x[ j ];
				temp2 = 0.0;
				for( i = 0; i < j; i++ ) {
					if( order === 'row-major' ) {
						y[ i ] += temp1 * A[ i * LDA + j ];
						temp2 += A[ i * LDA + j ] * x[ i ];
					} else {
						y[ i ] += temp1 * A[ j * LDA + i ];
						temp2 += A[ j * LDA + i ] * x[ i ];
					}
				}
				y[ j ] += ( ( temp1 * A[ j * LDA + j ] ) + ( alpha * temp2 ) );
			}
		} else {
			jx = kx;
			jy = ky;
			for( j = 0; j < N; j++ ) {
				temp1 = alpha * x[ jx ];
				temp2 = 0.0;
				ix = kx;
				iy = ky;
				for( i = 0; i < j; i++ ) {
					if( order === 'row-major' ) {
						y[ iy ] += temp1 * A[ i * LDA + j ];
						temp2 += A[ i * LDA + j ] * x[ ix ];
					} else {
						y[ iy ] += temp1 * A[ j * LDA + i ];
						temp2 += A[ j * LDA + i ] * x[ ix ];
					}
					ix += strideX;
					iy += strideY;
				}
				y[ jy ] += ( ( temp1 * A[ j * LDA + j ] ) + ( alpha * temp2 ) );
				jx += strideX;
				jy += strideY;
			}
		}

	} else {
		// Form y when A is stored in lower triangle

		if( strideX === 1 && strideY === 1 ) {
			for( j = 0; j < N; j++ ) {
				temp1 = alpha * x[ j ];
				temp2 = 0.0;
				y[ j ] += temp1 * A[ j * LDA + j ];
				for( i = j + 1; i < N; i++ ) {
					if( order === 'row-major' ) {
						y[ i ] += temp1 * A[ i * LDA + j ];
						temp2 += A[ i * LDA + j ] * x[ i ];
					} else {
						y[ i ] += temp1 * A[ j * LDA + i ];
						temp2 += A[ j * LDA + i ] * x[ i ];
					}
				}
				y[ j ] += alpha * temp2;
			}
		} else {
			jx = kx;
			jy = ky;
			for( j = 0; j < N; j++ ) {
				temp1 = alpha * x[ jx ];
				temp2 = 0.0;
				y[ jy ] += temp1 * A[ j * LDA + j ];
				ix = jx;
				iy = jy;
				for( i = j + 1; i < N; i++ ) {
					ix += strideX;
					iy += strideY;
					if( order === 'row-major' ) {
						y[ iy ] += temp1 * A[ i * LDA + j ];
						temp2 += A[ i * LDA + j ] * x[ ix ];
					} else {
						y[ iy ] += temp1 * A[ j * LDA + i ];
						temp2 += A[ j * LDA + i ] * x[ ix ];
					}
				}
				y[ jy ] += ( alpha * temp2 );
				jx += strideX;
				jy += strideY;
			}
		}

	}
	return y;
}


// EXPORTS //

module.exports = ssymv;
