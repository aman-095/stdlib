/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* eslint-disable max-len */

'use strict';

// MODULES //

var tape = require( 'tape' );
var Float32Array = require( '@stdlib/array/float32' );
var EPS = require( '@stdlib/constants/float32/eps' );
var abs = require( '@stdlib/math/base/special/abs' );
var ssymv = require( './../lib/ndarray.js' );


// FIXTURES //

var xoyt = require( './fixtures/strides_xoyt.json' );
var xpyp = require( './fixtures/strides_xpyp.json' );
var xnyp = require( './fixtures/strides_xnyp.json' );
var xpyn = require( './fixtures/strides_xpyn.json' );
var xnyn = require( './fixtures/strides_xnyn.json' );


// FUNCTIONS //

/**
* Tests for element-wise approximate equality.
*
* @private
* @param {Object} t - test object
* @param {Collection} actual - actual values
* @param {Collection} expected - expected values
* @param {number} rtol - relative tolerance
*/
function isApprox( t, actual, expected, rtol ) {
	var delta;
	var tol;
	var i;

	t.strictEqual( actual.length, expected.length, 'returns expected value' );
	for ( i = 0; i < expected.length; i++ ) {
		if ( actual[ i ] === expected[ i ] ) {
			t.strictEqual( actual[ i ], expected[ i ], 'returns expected value' );
		} else {
			delta = abs( actual[ i ] - expected[ i ] );
			tol = rtol * EPS * abs( expected[ i ] );
			t.ok( delta <= tol, 'within tolerance. actual: '+actual[ i ]+'. expected: '+expected[ i ]+'. delta: '+delta+'. tol: '+tol+'.' );
		}
	}
}


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.strictEqual( typeof ssymv, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function has an arity of 13', function test( t ) {
	t.strictEqual( ssymv.length, 13, 'returns expected value' );
	t.end();
});

tape( 'the function performs the matrix-vector operation `y = alpha*A*x + beta*y` where `alpha` and `beta` are scalars, `x` and `y` are `n` element vectors, and `A` is an `n` by `n` symmetric matrix (sx=1, sy=1)', function test( t ) {
	var expected;
	var out;
	var a;
	var x;
	var y;

	a = new Float32Array( xpyp.A );
	x = new Float32Array( xpyp.x );
	y = new Float32Array( xpyp.y );

	expected = new Float32Array( xpyp.y_out );

	out = ssymv( xpyp.order, xpyp.uplo, xpyp.N, xpyp.alpha, a, xpyp.lda, x, xpyp.strideX, 0, xpyp.beta, y, xpyp.strideY, 0 );
	isApprox( t, y, expected, 2.0 );
	t.strictEqual( out, y, 'returns expected value' );
	t.end();
});

tape( 'the function performs the matrix-vector operation `y = alpha*A*x + beta*y` where `alpha` and `beta` are scalars, `x` and `y` are `n` element vectors, and `A` is an `n` by `n` symmetric matrix (sx=1, sy=2)', function test( t ) {
	var expected;
	var out;
	var a;
	var x;
	var y;

	a = new Float32Array( xoyt.A );
	x = new Float32Array( xoyt.x );
	y = new Float32Array( xoyt.y );

	expected = new Float32Array( xoyt.y_out );

	out = ssymv( xoyt.order, xoyt.uplo, xoyt.N, xoyt.alpha, a, xoyt.lda, x, xoyt.strideX, 0, xoyt.beta, y, xoyt.strideY, 0 );
	isApprox( t, y, expected, 2.0 );
	t.strictEqual( out, y, 'returns expected value' );
	t.end();
});

tape( 'the function performs the matrix-vector operation `y = alpha*A*x + beta*y` where `alpha` and `beta` are scalars, `x` and `y` are `n` element vectors, and `A` is an `n` by `n` symmetric matrix (sx=1, sy=-1)', function test( t ) {
	var expected;
	var out;
	var a;
	var x;
	var y;

	a = new Float32Array( xpyn.A );
	x = new Float32Array( xpyn.x );
	y = new Float32Array( xpyn.y );

	expected = new Float32Array( xpyn.y_out );

	out = ssymv( xpyn.order, xpyn.uplo, xpyn.N, xpyn.alpha, a, xpyn.lda, x, xpyn.strideX, 0, xpyn.beta, y, xpyn.strideY, 2 );
	isApprox( t, y, expected, 2.0 );
	t.strictEqual( out, y, 'returns expected value' );
	t.end();
});

tape( 'the function performs the matrix-vector operation `y = alpha*A*x + beta*y` where `alpha` and `beta` are scalars, `x` and `y` are `n` element vectors, and `A` is an `n` by `n` symmetric matrix (sx=-1, sy=1)', function test( t ) {
	var expected;
	var out;
	var a;
	var x;
	var y;

	a = new Float32Array( xnyp.A );
	x = new Float32Array( xnyp.x );
	y = new Float32Array( xnyp.y );

	expected = new Float32Array( xnyp.y_out );

	out = ssymv( xnyp.order, xnyp.uplo, xnyp.N, xnyp.alpha, a, xnyp.lda, x, xnyp.strideX, 2, xnyp.beta, y, xnyp.strideY, 0 );
	isApprox( t, y, expected, 2.0 );
	t.strictEqual( out, y, 'returns expected value' );
	t.end();
});

tape( 'the function returns a reference to the second input vector', function test( t ) {
	var out;
	var a;
	var x;
	var y;

	a = new Float32Array( xpyp.A );
	x = new Float32Array( xpyp.x );
	y = new Float32Array( xpyp.y );

	out = ssymv( xpyp.order, xpyp.uplo, xpyp.N, xpyp.alpha, a, xpyp.lda, x, xpyp.strideX, 0, xpyp.beta, y, xpyp.strideY, 0 );
	t.strictEqual( out, y, 'returns expected value' );
	t.end();
});

tape( 'the function supports complex access patterns', function test( t ) {
	var expected;
	var out;
	var a;
	var x;
	var y;

	a = new Float32Array( xnyn.A );
	x = new Float32Array( xnyn.x );
	y = new Float32Array( xnyn.y );

	expected = new Float32Array( xnyn.y_out );

	out = ssymv( xnyn.order, xnyn.uplo, xnyn.N, xnyn.alpha, a, xnyn.lda, x, xnyn.strideX, 2, xnyn.beta, y, xnyn.strideY, 2 );
	isApprox( t, y, expected, 2.0 );
	t.strictEqual( out, y, 'returns expected value' );
	t.end();
});
