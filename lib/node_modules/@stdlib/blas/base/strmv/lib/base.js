/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var f32 = require( '@stdlib/number/float64/base/to-float32' );


// MAIN //

/**
* Performs one of the matrix-vector operations `x = A*x` or `x = A**T*x`, where `x` is an `N` element vector and `A` is an `N` by `N` unit, or non-unit, upper or lower triangular matrix.
*
* @param {string} order - storage layout
* @param {string} uplo - specifies whether the upper or lower triangular part of the symmetric matrix `A` is supplied
* @param {string} trans - specifies whether the matrix `A` is transposed, conjugate-transposed, or not transposed
* @param {string} diag - specifies whether the matrix `A` has a unit diagonal
* @param {NonNegativeInteger} N - number of elements along each dimension of `A`
* @param {Float32Array} A - input matrix
* @param {integer} LDA - stride of the first dimension of `A` (a.k.a., leading dimension of the matrix `A`)
* @param {NonNegativeInteger} offsetA - starting index for `A`
* @param {Float32Array} x - input vector
* @param {integer} strideX - `x` stride length
* @param {NonNegativeInteger} offsetX - starting index for `x`
* @throws {TypeError} first argument must be a valid order
* @throws {TypeError} second argument must specify whether the lower or upper triangular matrix is supplied
* @throws {TypeError} third argument must be a valid transpose operation
* @throws {TypeError} fourth argument must be a valid diagonal type
* @throws {RangeError} fifth argument must be a nonnegative integer
* @throws {RangeError} seventh argument must be greater than or equal to max(1,N)
* @throws {RangeError} tenth argument must be non-zero
* @returns {Float32Array} `x`
*
* @example
* var Float32Array = require( '@stdlib/array/float32' );
*
* var A = new Float32Array( [ 1.0, 2.0, 3.0, 0.0, 1.0, 2.0, 0.0, 0.0, 1.0 ] );
* var x = new Float32Array( [ 1.0, 2.0, 3.0 ] );
*
* strmv( 'row-major', 'upper', 'none', 'unit', 3, A, 3, 0, x, 1, 0 );
* // x => <Float32Array>[ 14.0, 8.0, 3.0 ]
*/
function strmv( order, uplo, trans, diag, N, A, LDA, offsetA, x, strideX, offsetX ) { // eslint-disable-line max-params, max-len
	var nonunit;
	var temp;
	var ix;
	var jx;
	var kx;
	var i;
	var j;

	nonunit = ( diag === 'non-unit' );
	kx = offsetX;
	if (
		( order === 'column-major' && trans === 'none' && uplo === 'upper' ) ||
		( order === 'row-major' && trans !== 'none' && uplo === 'lower' )
	) {
		jx = kx;
		for ( j = 0; j < N; j++ ) {
			if ( x[ jx ] !== 0.0 ) {
				temp = x[ jx ];
				ix = kx;
				for ( i = 0; i < j; i++ ) {
					x[ ix ] += f32( temp * A[ offsetA+i+(LDA*j) ] );
					ix += strideX;
				}
				if ( nonunit ) {
					x[ jx ] = f32( x[ jx ] * A[ offsetA+j+(LDA*j) ] );
				}
			}
			jx += strideX;
		}
		return x;
	}
	if (
		( order === 'column-major' && trans === 'none' && uplo === 'lower' ) ||
		( order === 'row-major' && trans !== 'none' && uplo === 'upper' )
	) {
		kx += ( N - 1 ) * strideX;
		jx = kx;
		for ( j = N - 1; j >= 0; j-- ) {
			if ( x[ jx ] !== 0.0 ) {
				temp = x[ jx ];
				ix = kx;
				for ( i = N - 1; i > j; i-- ) {
					x[ ix ] += f32( temp * A[ offsetA+i+(LDA*j) ] );
					ix -= strideX;
				}
				if ( nonunit ) {
					x[ jx ] = f32( x[ jx ] * A[ offsetA+j+(LDA*j) ] );
				}
			}
			jx -= strideX;
		}
		return x;
	}
	if (
		( order === 'column-major' && trans !== 'none' && uplo === 'upper' ) ||
		( order === 'row-major' && trans === 'none' && uplo === 'lower' )
	) {
		jx = kx + ( ( N - 1 ) * strideX );
		for ( j = N - 1; j >= 0; j-- ) {
			temp = x[ jx ];
			ix = jx;
			if ( nonunit ) {
				temp = f32( temp * A[ offsetA+j+(j*LDA) ] );
			}
			for ( i = j - 1; i >= 0; i-- ) {
				ix -= strideX;
				temp = f32( temp + f32( x[ ix ] * A[ offsetA+i+(j*LDA) ] ) );
			}
			x[ jx ] = temp;
			jx -= strideX;
		}
		return x;
	}
	if (
		( order === 'column-major' && trans !== 'none' && uplo === 'lower' ) ||
		( order === 'row-major' && trans === 'none' && uplo === 'upper' )
	) {
		jx = kx;
		for ( j = 0; j < N; j++ ) {
			temp = x[ jx ];
			ix = jx;
			if ( nonunit ) {
				temp = f32( temp * A[ offsetA+j+(j*LDA) ] );
			}
			for ( i = j + 1; i < N; i++ ) {
				ix += strideX;
				temp = f32( temp + f32( x[ ix ] * A[ offsetA+i+(j*LDA) ] ) );
			}
			x[ jx ] = temp;
			jx += strideX;
		}
		return x;
	}
}


// EXPORTS //

module.exports = strmv;
