/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* eslint-disable max-len */

'use strict';

// MODULES //

var tape = require( 'tape' );
var Float32Array = require( '@stdlib/array/float32' );
var EPS = require( '@stdlib/constants/float32/eps' );
var abs = require( '@stdlib/math/base/special/abs' );
var strmv = require( './../lib/strmv.js' );


// FIXTURES //

var rlntnu = require( './fixtures/row_major_l_nt_nu.json' );
var rltnu = require( './fixtures/row_major_l_t_nu.json' );
var rlntu = require( './fixtures/row_major_l_nt_u.json' );
var rltu = require( './fixtures/row_major_l_t_u.json' );
var runtnu = require( './fixtures/row_major_u_nt_nu.json' );
var runtu = require( './fixtures/row_major_u_nt_u.json' );
var rutnu = require( './fixtures/row_major_u_t_nu.json' );
var rutu = require( './fixtures/row_major_u_t_u.json' );
var rxt = require( './fixtures/row_major_xt.json' );
var rxn = require( './fixtures/row_major_xn.json' );

var clntnu = require( './fixtures/column_major_l_nt_nu.json' );
var cltnu = require( './fixtures/column_major_l_t_nu.json' );
var clntu = require( './fixtures/column_major_l_nt_u.json' );
var cltu = require( './fixtures/column_major_l_t_u.json' );
var cuntnu = require( './fixtures/column_major_u_nt_nu.json' );
var cuntu = require( './fixtures/column_major_u_nt_u.json' );
var cutnu = require( './fixtures/column_major_u_t_nu.json' );
var cutu = require( './fixtures/column_major_u_t_u.json' );
var cxt = require( './fixtures/column_major_xt.json' );
var cxn = require( './fixtures/column_major_xn.json' );


// FUNCTIONS //

/**
* Tests for element-wise approximate equality.
*
* @private
* @param {Object} t - test object
* @param {Collection} actual - actual values
* @param {Collection} expected - expected values
* @param {number} rtol - relative tolerance
*/
function isApprox( t, actual, expected, rtol ) {
	var delta;
	var tol;
	var i;

	t.strictEqual( actual.length, expected.length, 'returns expected value' );
	for ( i = 0; i < expected.length; i++ ) {
		if ( actual[ i ] === expected[ i ] ) {
			t.strictEqual( actual[ i ], expected[ i ], 'returns expected value' );
		} else {
			delta = abs( actual[ i ] - expected[ i ] );
			tol = rtol * EPS * abs( expected[ i ] );
			t.ok( delta <= tol, 'within tolerance. actual: '+actual[ i ]+'. expected: '+expected[ i ]+'. delta: '+delta+'. tol: '+tol+'.' );
		}
	}
}


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.strictEqual( typeof strmv, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function has an arity of 9', function test( t ) {
	t.strictEqual( strmv.length, 9, 'returns expected value' );
	t.end();
});

tape( 'the function throws an error if provided an invalid first argument', function test( t ) {
	var values;
	var i;

	values = [
		'foo',
		'bar',
		'beep',
		'boop'
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[ i ] ), TypeError, 'throws an error when provided ' + values[ i ] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			strmv( value, rutu.uplo, rutu.trans, rutu.diag, rutu.N, new Float32Array( rutu.A ), rutu.LDA, new Float32Array( rutu.x ), rutu.strideX );
		};
	}
});

tape( 'the function throws an error if provided an invalid second argument', function test( t ) {
	var values;
	var i;

	values = [
		'foo',
		'bar',
		'beep',
		'boop'
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[ i ] ), TypeError, 'throws an error when provided ' + values[ i ] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			strmv( rutu.order, value, rutu.trans, rutu.diag, rutu.N, new Float32Array( rutu.A ), rutu.LDA, new Float32Array( rutu.x ), rutu.strideX );
		};
	}
});

tape( 'the function throws an error if provided an invalid third argument', function test( t ) {
	var values;
	var i;

	values = [
		'foo',
		'bar',
		'beep',
		'boop'
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[ i ] ), TypeError, 'throws an error when provided ' + values[ i ] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			strmv( rutu.order, rutu.uplo, value, rutu.diag, rutu.N, new Float32Array( rutu.A ), rutu.LDA, new Float32Array( rutu.x ), rutu.strideX );
		};
	}
});

tape( 'the function throws an error if provided an invalid fourth argument', function test( t ) {
	var values;
	var i;

	values = [
		'foo',
		'bar',
		'beep',
		'boop'
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[ i ] ), TypeError, 'throws an error when provided ' + values[ i ] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			strmv( rutu.order, rutu.uplo, rutu.trans, value, rutu.N, new Float32Array( rutu.A ), rutu.LDA, new Float32Array( rutu.x ), rutu.strideX );
		};
	}
});

tape( 'the function throws an error if provided an invalid fifth argument', function test( t ) {
	var values;
	var i;

	values = [
		-1,
		-2,
		-3
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[ i ] ), RangeError, 'throws an error when provided ' + values[ i ] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			strmv( rutu.order, rutu.uplo, rutu.trans, rutu.diag, value, new Float32Array( rutu.A ), rutu.LDA, new Float32Array( rutu.x ), rutu.strideX );
		};
	}
});

tape( 'the function throws an error if provided an invalid seventh argument', function test( t ) {
	var values;
	var i;

	values = [
		2,
		1,
		0,
		-1,
		-2,
		-3
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[ i ] ), RangeError, 'throws an error when provided ' + values[ i ] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			strmv( rutu.order, rutu.uplo, rutu.trans, rutu.diag, rutu.N, new Float32Array( rutu.A ), value, new Float32Array( rutu.x ), rutu.strideX );
		};
	}
});

tape( 'the function throws an error if provided an invalid ninth argument', function test( t ) {
	var values;
	var i;

	values = [
		0
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[ i ] ), RangeError, 'throws an error when provided ' + values[ i ] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			strmv( rutu.order, rutu.uplo, rutu.trans, rutu.diag, rutu.N, new Float32Array( rutu.A ), rutu.LDA, new Float32Array( rutu.x ), value );
		};
	}
});

tape( 'the function performs one of the matrix-vector operation `x = A*x`, or `x = A**T*x`, `x` and `y` are `N` element vectors, and `A` is an `N` by `N` unit, or non-unit, upper or lower triangular matrix (row-major, lower, none, non-unit)', function test( t ) {
	var expected;
	var out;
	var a;
	var x;

	a = new Float32Array( rlntnu.A );
	x = new Float32Array( rlntnu.x );

	expected = new Float32Array( rlntnu.x_out );

	out = strmv( rlntnu.order, rlntnu.uplo, rlntnu.trans, rlntnu.diag, rlntnu.N, a, rlntnu.LDA, x, rlntnu.strideX );
	t.strictEqual( out, x, 'returns expected value' );
	isApprox( t, x, expected, 2.0 );

	t.end();
});

tape( 'the function performs one of the matrix-vector operation `x = A*x`, or `x = A**T*x`, `x` and `y` are `N` element vectors, and `A` is an `N` by `N` unit, or non-unit, upper or lower triangular matrix (column-major, lower, none, non-unit)', function test( t ) {
	var expected;
	var out;
	var a;
	var x;

	a = new Float32Array( clntnu.A );
	x = new Float32Array( clntnu.x );

	expected = new Float32Array( clntnu.x_out );

	out = strmv( clntnu.order, clntnu.uplo, clntnu.trans, clntnu.diag, clntnu.N, a, clntnu.LDA, x, clntnu.strideX );
	t.strictEqual( out, x, 'returns expected value' );
	isApprox( t, x, expected, 2.0 );

	t.end();
});

tape( 'the function performs one of the matrix-vector operation `x = A*x`, or `x = A**T*x`, `x` and `y` are `N` element vectors, and `A` is an `N` by `N` unit, or non-unit, upper or lower triangular matrix (row-major, lower, transpose, non-unit)', function test( t ) {
	var expected;
	var out;
	var a;
	var x;

	a = new Float32Array( rltnu.A );
	x = new Float32Array( rltnu.x );

	expected = new Float32Array( rltnu.x_out );

	out = strmv( rltnu.order, rltnu.uplo, rltnu.trans, rltnu.diag, rltnu.N, a, rltnu.LDA, x, rltnu.strideX );
	t.strictEqual( out, x, 'returns expected value' );
	isApprox( t, x, expected, 2.0 );

	t.end();
});

tape( 'the function performs one of the matrix-vector operation `x = A*x`, or `x = A**T*x`, `x` and `y` are `N` element vectors, and `A` is an `N` by `N` unit, or non-unit, upper or lower triangular matrix (column-major, lower, transpose, non-unit)', function test( t ) {
	var expected;
	var out;
	var a;
	var x;

	a = new Float32Array( cltnu.A );
	x = new Float32Array( cltnu.x );

	expected = new Float32Array( cltnu.x_out );

	out = strmv( cltnu.order, cltnu.uplo, cltnu.trans, cltnu.diag, cltnu.N, a, cltnu.LDA, x, cltnu.strideX );
	t.strictEqual( out, x, 'returns expected value' );
	isApprox( t, x, expected, 2.0 );

	t.end();
});

tape( 'the function performs one of the matrix-vector operation `x = A*x`, or `x = A**T*x`, `x` and `y` are `N` element vectors, and `A` is an `N` by `N` unit, or non-unit, upper or lower triangular matrix (row-major, lower, none, unit)', function test( t ) {
	var expected;
	var out;
	var a;
	var x;

	a = new Float32Array( rlntu.A );
	x = new Float32Array( rlntu.x );

	expected = new Float32Array( rlntu.x_out );

	out = strmv( rlntu.order, rlntu.uplo, rlntu.trans, rlntu.diag, rlntu.N, a, rlntu.LDA, x, rlntu.strideX );
	t.strictEqual( out, x, 'returns expected value' );
	isApprox( t, x, expected, 2.0 );

	t.end();
});

tape( 'the function performs one of the matrix-vector operation `x = A*x`, or `x = A**T*x`, `x` and `y` are `N` element vectors, and `A` is an `N` by `N` unit, or non-unit, upper or lower triangular matrix (column-major, lower, none, unit)', function test( t ) {
	var expected;
	var out;
	var a;
	var x;

	a = new Float32Array( clntu.A );
	x = new Float32Array( clntu.x );

	expected = new Float32Array( clntu.x_out );

	out = strmv( clntu.order, clntu.uplo, clntu.trans, clntu.diag, clntu.N, a, clntu.LDA, x, clntu.strideX );
	t.strictEqual( out, x, 'returns expected value' );
	isApprox( t, x, expected, 2.0 );

	t.end();
});

tape( 'the function performs one of the matrix-vector operation `x = A*x`, or `x = A**T*x`, `x` and `y` are `N` element vectors, and `A` is an `N` by `N` unit, or non-unit, upper or lower triangular matrix (row-major, lower, transpose, unit)', function test( t ) {
	var expected;
	var out;
	var a;
	var x;

	a = new Float32Array( rltu.A );
	x = new Float32Array( rltu.x );

	expected = new Float32Array( rltu.x_out );

	out = strmv( rltu.order, rltu.uplo, rltu.trans, rltu.diag, rltu.N, a, rltu.LDA, x, rltu.strideX );
	t.strictEqual( out, x, 'returns expected value' );
	isApprox( t, x, expected, 2.0 );

	t.end();
});

tape( 'the function performs one of the matrix-vector operation `x = A*x`, or `x = A**T*x`, `x` and `y` are `N` element vectors, and `A` is an `N` by `N` unit, or non-unit, upper or lower triangular matrix (column-major, lower, transpose, unit)', function test( t ) {
	var expected;
	var out;
	var a;
	var x;

	a = new Float32Array( cltu.A );
	x = new Float32Array( cltu.x );

	expected = new Float32Array( cltu.x_out );

	out = strmv( cltu.order, cltu.uplo, cltu.trans, cltu.diag, cltu.N, a, cltu.LDA, x, cltu.strideX );
	t.strictEqual( out, x, 'returns expected value' );
	isApprox( t, x, expected, 2.0 );

	t.end();
});

tape( 'the function performs one of the matrix-vector operation `x = A*x`, or `x = A**T*x`, `x` and `y` are `N` element vectors, and `A` is an `N` by `N` unit, or non-unit, upper or lower triangular matrix (row-major, upper, none, non-unit)', function test( t ) {
	var expected;
	var out;
	var a;
	var x;

	a = new Float32Array( runtnu.A );
	x = new Float32Array( runtnu.x );

	expected = new Float32Array( runtnu.x_out );

	out = strmv( runtnu.order, runtnu.uplo, runtnu.trans, runtnu.diag, runtnu.N, a, runtnu.LDA, x, runtnu.strideX );
	t.strictEqual( out, x, 'returns expected value' );
	isApprox( t, x, expected, 2.0 );

	t.end();
});

tape( 'the function performs one of the matrix-vector operation `x = A*x`, or `x = A**T*x`, `x` and `y` are `N` element vectors, and `A` is an `N` by `N` unit, or non-unit, upper or lower triangular matrix (column-major, upper, none, non-unit)', function test( t ) {
	var expected;
	var out;
	var a;
	var x;

	a = new Float32Array( cuntnu.A );
	x = new Float32Array( cuntnu.x );

	expected = new Float32Array( cuntnu.x_out );

	out = strmv( cuntnu.order, cuntnu.uplo, cuntnu.trans, cuntnu.diag, cuntnu.N, a, cuntnu.LDA, x, cuntnu.strideX );
	t.strictEqual( out, x, 'returns expected value' );
	isApprox( t, x, expected, 2.0 );

	t.end();
});

tape( 'the function performs one of the matrix-vector operation `x = A*x`, or `x = A**T*x`, `x` and `y` are `N` element vectors, and `A` is an `N` by `N` unit, or non-unit, upper or lower triangular matrix (row-major, upper, none, unit)', function test( t ) {
	var expected;
	var out;
	var a;
	var x;

	a = new Float32Array( runtu.A );
	x = new Float32Array( runtu.x );

	expected = new Float32Array( runtu.x_out );

	out = strmv( runtu.order, runtu.uplo, runtu.trans, runtu.diag, runtu.N, a, runtu.LDA, x, runtu.strideX );
	t.strictEqual( out, x, 'returns expected value' );
	isApprox( t, x, expected, 2.0 );

	t.end();
});

tape( 'the function performs one of the matrix-vector operation `x = A*x`, or `x = A**T*x`, `x` and `y` are `N` element vectors, and `A` is an `N` by `N` unit, or non-unit, upper or lower triangular matrix (column-major, upper, none, unit)', function test( t ) {
	var expected;
	var out;
	var a;
	var x;

	a = new Float32Array( cuntu.A );
	x = new Float32Array( cuntu.x );

	expected = new Float32Array( cuntu.x_out );

	out = strmv( cuntu.order, cuntu.uplo, cuntu.trans, cuntu.diag, cuntu.N, a, cuntu.LDA, x, cuntu.strideX );
	t.strictEqual( out, x, 'returns expected value' );
	isApprox( t, x, expected, 2.0 );

	t.end();
});

tape( 'the function performs one of the matrix-vector operation `x = A*x`, or `x = A**T*x`, `x` and `y` are `N` element vectors, and `A` is an `N` by `N` unit, or non-unit, upper or lower triangular matrix (row-major, upper, transpose, non-unit)', function test( t ) {
	var expected;
	var out;
	var a;
	var x;

	a = new Float32Array( rutnu.A );
	x = new Float32Array( rutnu.x );

	expected = new Float32Array( rutnu.x_out );

	out = strmv( rutnu.order, rutnu.uplo, rutnu.trans, rutnu.diag, rutnu.N, a, rutnu.LDA, x, rutnu.strideX );
	t.strictEqual( out, x, 'returns expected value' );
	isApprox( t, x, expected, 2.0 );

	t.end();
});

tape( 'the function performs one of the matrix-vector operation `x = A*x`, or `x = A**T*x`, `x` and `y` are `N` element vectors, and `A` is an `N` by `N` unit, or non-unit, upper or lower triangular matrix (column-major, upper, transpose, non-unit)', function test( t ) {
	var expected;
	var out;
	var a;
	var x;

	a = new Float32Array( cutnu.A );
	x = new Float32Array( cutnu.x );

	expected = new Float32Array( cutnu.x_out );

	out = strmv( cutnu.order, cutnu.uplo, cutnu.trans, cutnu.diag, cutnu.N, a, cutnu.LDA, x, cutnu.strideX );
	t.strictEqual( out, x, 'returns expected value' );
	isApprox( t, x, expected, 2.0 );

	t.end();
});

tape( 'the function performs one of the matrix-vector operation `x = A*x`, or `x = A**T*x`, `x` and `y` are `N` element vectors, and `A` is an `N` by `N` unit, or non-unit, upper or lower triangular matrix (row-major, upper, transpose, unit)', function test( t ) {
	var expected;
	var out;
	var a;
	var x;

	a = new Float32Array( rutu.A );
	x = new Float32Array( rutu.x );

	expected = new Float32Array( rutu.x_out );

	out = strmv( rutu.order, rutu.uplo, rutu.trans, rutu.diag, rutu.N, a, rutu.LDA, x, rutu.strideX );
	t.strictEqual( out, x, 'returns expected value' );
	isApprox( t, x, expected, 2.0 );

	t.end();
});

tape( 'the function performs one of the matrix-vector operation `x = A*x`, or `x = A**T*x`, `x` and `y` are `N` element vectors, and `A` is an `N` by `N` unit, or non-unit, upper or lower triangular matrix (column-major, upper, transpose, unit)', function test( t ) {
	var expected;
	var out;
	var a;
	var x;

	a = new Float32Array( cutu.A );
	x = new Float32Array( cutu.x );

	expected = new Float32Array( cutu.x_out );

	out = strmv( cutu.order, cutu.uplo, cutu.trans, cutu.diag, cutu.N, a, cutu.LDA, x, cutu.strideX );
	t.strictEqual( out, x, 'returns expected value' );
	isApprox( t, x, expected, 2.0 );

	t.end();
});

tape( 'the function performs one of the matrix-vector operation `x = A*x`, or `x = A**T*x`, `x` and `y` are `N` element vectors, and `A` is an `N` by `N` unit, or non-unit, upper or lower triangular matrix (row-major, sx=2)', function test( t ) {
	var expected;
	var out;
	var a;
	var x;

	a = new Float32Array( rxt.A );
	x = new Float32Array( rxt.x );

	expected = new Float32Array( rxt.x_out );

	out = strmv( rxt.order, rxt.uplo, rxt.trans, rxt.diag, rxt.N, a, rxt.LDA, x, rxt.strideX );
	t.strictEqual( out, x, 'returns expected value' );
	isApprox( t, x, expected, 2.0 );

	t.end();
});

tape( 'the function performs one of the matrix-vector operation `x = A*x`, or `x = A**T*x`, `x` and `y` are `N` element vectors, and `A` is an `N` by `N` unit, or non-unit, upper or lower triangular matrix (column-major, sx=2)', function test( t ) {
	var expected;
	var out;
	var a;
	var x;

	a = new Float32Array( cxt.A );
	x = new Float32Array( cxt.x );

	expected = new Float32Array( cxt.x_out );

	out = strmv( cxt.order, cxt.uplo, cxt.trans, cxt.diag, cxt.N, a, cxt.LDA, x, cxt.strideX );
	t.strictEqual( out, x, 'returns expected value' );
	isApprox( t, x, expected, 2.0 );

	t.end();
});

tape( 'the function returns a reference to the second input vector', function test( t ) {
	var out;
	var a;
	var x;

	a = new Float32Array( rutu.A );
	x = new Float32Array( rutu.x );

	out = strmv( rutu.order, rutu.uplo, rutu.trans, rutu.diag, rutu.N, a, rutu.LDA, x, rutu.strideX );
	t.strictEqual( out, x, 'returns expected value' );

	t.end();
});

tape( 'if `N` is zero, the function returns the second input vector unchanged (row-major)', function test( t ) {
	var expected;
	var out;
	var a;
	var x;

	a = new Float32Array( rutu.A );
	x = new Float32Array( rutu.x );

	expected = new Float32Array( rutu.x );

	out = strmv( rutu.order, rutu.uplo, rutu.trans, rutu.diag, 0, a, rutu.LDA, x, rutu.strideX );
	t.strictEqual( out, x, 'returns expected value' );
	t.deepEqual( x, expected, 'returns expected value' );

	t.end();
});

tape( 'if `N` is zero, the function returns the second input vector unchanged (column-major)', function test( t ) {
	var expected;
	var out;
	var a;
	var x;

	a = new Float32Array( cutu.A );
	x = new Float32Array( cutu.x );

	expected = new Float32Array( cutu.x );

	out = strmv( cutu.order, cutu.uplo, cutu.trans, cutu.diag, 0, a, cutu.LDA, x, cutu.strideX );
	t.strictEqual( out, x, 'returns expected value' );
	t.deepEqual( x, expected, 'returns expected value' );

	t.end();
});

tape( 'the function supports complex access patterns (row-major)', function test( t ) {
	var expected;
	var out;
	var a;
	var x;

	a = new Float32Array( rxn.A );
	x = new Float32Array( rxn.x );

	expected = new Float32Array( rxn.x_out );

	out = strmv( rxn.order, rxn.uplo, rxn.trans, rxn.diag, rxn.N, a, rxn.LDA, x, rxn.strideX );
	t.strictEqual( out, x, 'returns expected value' );
	isApprox( t, x, expected, 2.0 );

	t.end();
});

tape( 'the function supports complex access patterns (column-major)', function test( t ) {
	var expected;
	var out;
	var a;
	var x;

	a = new Float32Array( cxn.A );
	x = new Float32Array( cxn.x );

	expected = new Float32Array( cxn.x_out );

	out = strmv( cxn.order, cxn.uplo, cxn.trans, cxn.diag, cxn.N, a, cxn.LDA, x, cxn.strideX );
	t.strictEqual( out, x, 'returns expected value' );
	isApprox( t, x, expected, 2.0 );

	t.end();
});
