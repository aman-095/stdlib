
{{alias}}( ord, uplo, trans, diag, N, A, lda, x, sx )
    Performs one of the matrix-vector operation `x = A*x`, or `x = A**T*x`,
    where `x` is an `N` element vector, and `A` is an `N` by `N` unit,
    or non-unit, upper or lower triangular matrix.

    Indexing is relative to the first index. To introduce an offset, use typed
    array views.

    If `N` is equal to `0`, the function returns `x` unchanged.

    Parameters
    ----------
    ord: string
        Row-major (C-style) or column-major (Fortran-style) order. Must be
        either 'row-major' or 'column-major'.

    uplo: string
        Specifies whether to reference the upper or lower triangular part of
        `A`.

    trans: string
        Specifies whether the matrix `A` is non-transpose, transpose, or
        conjugate transpose.

    diag: string
        Specifies whether or not `A` is unit triangular.

    N: integer
        Number of elements along each dimension of `A`.

    A: Float32Array
        Matrix.

    lda: integer
        Stride of the first dimension of `A` (a.k.a., leading dimension of the
        matrix `A`).

    x: Float32Array
        Input vector.

    sx: integer
        Index increment for `x`.

    Returns
    -------
    x: Float32Array
        Output vector.

    Examples
    --------
    > var x = new {{alias:@stdlib/array/float32}}( [ 1.0, 1.0 ] );
    > var A = new {{alias:@stdlib/array/float32}}( [ 1.0, 2.0, 0.0, 1.0 ] );
    > {{alias}}( 'row-major', 'upper', 'none', 'unit', 2, A, 2, x, 1 )
    <Float32Array>[ 3.0, 1.0 ]


{{alias}}.ndarray( ord, uplo, trans, diag, N, A, lda, oa, x, sx, ox )
    Performs one of the matrix-vector operation `x = A*x`, or `x = A**T*x`,
    using alternative indexing semantics, where `x` is an `N` element
    vector, and `A` is an `N` by `N` unit, or non-unit, upper or lower
    triangular matrix.

    While typed array views mandate a view offset based on the underlying
    buffer, the offset parameters support indexing semantics based on starting
    indices.

    Parameters
    ----------
    ord: string
        Row-major (C-style) or column-major (Fortran-style) ord. Must be
        either 'row-major' or 'column-major'.

    uplo: string
        Specifies whether to reference the upper or lower triangular part of
        `A`.

    trans: string
        Specifies whether the matrix `A` is non-transpose, transpose, or
        conjugate transpose.

    diag: string
        Specifies whether or not `A` is unit triangular.

    N: integer
        Number of elements along each dimension of `A`.

    A: Float32Array
        Matrix.

    lda: integer
        Stride of the first dimension of `A` (a.k.a., leading dimension of the
        matrix `A`).

    oa: integer
        Starting index for `A`.

    x: Float32Array
        Input vector.

    sx: integer
        Index increment for `x`.

    ox: integer
        Starting index for `x`.

    Returns
    -------
    x: Float32Array
        Output array.

    Examples
    --------
    > var x = new {{alias:@stdlib/array/float32}}( [ 1.0, 1.0 ] );
    > var A = new {{alias:@stdlib/array/float32}}( [ 1.0, 2.0, 0.0, 1.0 ] );
    > var ord = 'row-major';
    > var uplo = 'upper';
    > {{alias}}.ndarray( ord, uplo, 'none', 'unit', 2, A, 2, 0, x, 1, 0 )
    <Float32Array>[ 3.0, 1.0 ]

    See Also
    --------
