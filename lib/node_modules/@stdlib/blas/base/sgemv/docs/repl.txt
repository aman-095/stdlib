
{{alias}}( order, trans, M, N, alpha, A, lda, x, strideX, beta, y, strideY )
    Perform one of the matrix-vector operations `y = alpha*A*x + beta*y`
    or `y = alpha*A**T*x + beta*y`.

    The stride parameters determine how operations are performed.

    Indexing is relative to the first index. To introduce an offset, use typed
    array views.

    If `M` or `N` is equal to `0`, the function returns `y` unchanged.

    If `alpha` equals `0` and beta equals `1`, the function returns `y`
    unchanged.

    Parameters
    ----------
    order: string
        Row-major (C-style) or column-major (Fortran-style) order.

    trans: string
        Specifies whether `A` is transposed.

    M: integer
        Number of rows in `A`.

    N: integer
        Number of columns in `A`.

    alpha: number
        Scalar.

    A: Float32Array
        Matrix.

    lda: integer
        Leading dimension.

    x: Float32Array
        Input vector `x`.

    strideX: integer
        Index increment for `x`.

    beta: number
        Scalar.

    y: Float32Array
        Input/output vector `y`.

    strideY: integer
        Index increment for `y`.

    Returns
    -------
    y: Float32Array
        Output array.

    Examples
    --------
    // Standard usage:
    > var x = new {{alias:@stdlib/array/float32}}( [ 1.0, 1.0 ] );
    > var y = new {{alias:@stdlib/array/float32}}( [ 1.0, 1.0 ] );
    > var A = new {{alias:@stdlib/array/float32}}( [ 1.0, 2.0, 3.0, 4.0 ] );
    > {{alias}}( 'row-major', 'N', 2, 2, 1.0, A, 2, x, 1, 1.0, y, 1 )
    <Float32Array>[ 4.0, 8.0 ]

    // Advanced indexing:
    > var x = new {{alias:@stdlib/array/float32}}( [ 1.0, 1.0 ] );
    > var y = new {{alias:@stdlib/array/float32}}( [ 1.0, 1.0 ] );
    > var A = new {{alias:@stdlib/array/float32}}( [ 1.0, 2.0, 3.0, 4.0 ] );
    > {{alias}}( 'row-major', 'N', 2, 2, 1.0, A, 2, x, -1, 1.0, y, -1 )
    <Float32Array>[ 8.0, 4.0 ]

    // Using typed array views:
    > var x0 = new {{alias:@stdlib/array/float32}}( [ 1.0, 1.0, 1.0 ] );
    > var y0 = new {{alias:@stdlib/array/float32}}( [ 1.0, 1.0 ] );
    > var A = new {{alias:@stdlib/array/float32}}( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );
    > var x1 = new {{alias:@stdlib/array/float32}}( x0.buffer, x0.BYTES_PER_ELEMENT*1 );
    > var y1 = new {{alias:@stdlib/array/float32}}( y0.buffer, y0.BYTES_PER_ELEMENT*1 );
    > {{alias}}( 'row-major', 'N', 2, 2, 1.0, A, 2, x1, -1, 1.0, y1, -1 )
    > y0
    <Float32Array>[ 1.0, 8.0 ]


{{alias}}.ndarray( order, trans, M, N, alpha, A, lda, x, strideX, offsetX, beta, y, strideY, offsetY )
    Perform one of the matrix-vector operations `y = alpha*A*x + beta*y`
    or `y = alpha*A**T*x + beta*y` alternative indexing semantics.

    While typed array views mandate a view offset based on the underlying
    buffer, the offset parameters support indexing semantics based on starting
    indices.

    Parameters
    ----------
    order: string
        Row-major (C-style) or column-major (Fortran-style) order.

    trans: string
        Specifies whether `A` is transposed.

    M: integer
        Number of rows in `A`.

    N: integer
        Number of columns in `A`.

    alpha: number
        Scalar.

    A: Float32Array
        Matrix.

    lda: integer
        Leading dimension.

    x: Float32Array
        Input vector `x`.

    strideX: integer
        Index increment for `x`.

    offsetX: integer
        Starting index for `x`.

    beta: number
        Scalar.

    y: Float32Array
        Input/output vector `y`.

    strideY: integer
        Index increment for `y`.

    offsetY: integer
        Starting index for `y`.

    Returns
    -------
    y: Float32Array
        Output array.

    Examples
    --------
    // Standard usage:
    > var x = new {{alias:@stdlib/array/float32}}( [ 1.0, 1.0, 1.0 ] );
    > var y = new {{alias:@stdlib/array/float32}}( [ 1.0, 1.0 ] );
    > var A = new {{alias:@stdlib/array/float32}}( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );
    > {{alias}}.ndarray( 'row-major', 'N', 2, 3, 1.0, A, 3, x, 1, 0, 1.0, y, 1, 0 )
    <Float32Array>[ 7.0, 16.0 ]

    // Advanced indexing:
    > var x = new {{alias:@stdlib/array/float32}}( [ 1.0, 1.0, 1.0 ] );
    > var y = new {{alias:@stdlib/array/float32}}( [ 1.0, 1.0 ] );
    > var A = new {{alias:@stdlib/array/float32}}( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );
    > {{alias}}.ndarray( 'row-major', 'N', 2, 3, 1.0, A, 3, x, -1, 2, 1.0, y, -1, 1 )
    <Float32Array>[ 16.0, 7.0 ]

    See Also
    --------
