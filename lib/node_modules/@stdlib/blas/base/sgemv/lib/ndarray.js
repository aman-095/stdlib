/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* eslint-disable */ // FIXME

'use strict';

// MODULES //

var sfill = require( '@stdlib/blas/ext/base/sfill' );
var max = require( '@stdlib/math/base/special/max' );
var f32 = require( '@stdlib/number/float64/base/to-float32' );
var isLayout = require( '@stdlib/blas/base/assert/is-layout' );
var isMatrixTranspose = require( '@stdlib/blas/base/assert/is-transpose-operation' );


// MAIN //

/**
* Performs one of the matrix-vector operations `y = alpha*A*x + beta*y` or `y = alpha*A**T*x + beta*y`, where alpha and beta are scalars, x and y are vectors and A is an m by n matrix.
*
* @param {string} order - storage layout
* @param {string} trans - specifies the operation to be performed
* @param {NonNegativeInteger} M - number of rows in the matrix `A`
* @param {NonNegativeInteger} N - number of columns in the matrix `A`
* @param {number} alpha - scalar constant
* @param {Float32Array} A - matrix of coefficients
* @param {PositiveInteger} LDA - stride of the first dimension of `A` (a.k.a., leading dimension of the matrix `A`)
* @param {Float32Array} x - an `M` element vector
* @param {integer} strideX - `x` stride length
* @param {NonNegativeInteger} offsetX - `x` starting index
* @param {number} beta - scalar constant
* @param {Float32Array} y - an `N` element vector
* @param {integer} strideY - `y` stride length
* @param {NonNegativeInteger} offsetY - `y` starting index
* @throws {TypeError} first argument must be a valid order
* @throws {TypeError} second argument must specify whether to consider transpose of the given matrix or not
* @throws {RangeError} third argument must be a nonnegative integer
* @throws {RangeError} fourth argument must be a nonnegative integer
* @throws {RangeError} seventh argument must be greater than or equal to max(1,M)
* @throws {RangeError} ninth argument must be non-zero
* @throws {RangeError} thirteenth argument must be non-zero
* @returns {Float32Array} `y`
*
* @example
* var Float32Array = require( '@stdlib/array/float32' );
*
* var A = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );
* var x  = new Float32Array( [ 1.0, 1.0, 1.0 ] );
* var y = new Float32Array( [ 1.0, 1.0 ] );
*
* sgemv( 'row-major', 'none', 2, 3, 1.0, A, 3, x, 1, 0, 1.0, y, 1, 0 );
* // y => <Float32Array>[ 7.0, 16.0 ]
*/
function sgemv( order, trans, M, N, alpha, A, LDA, x, strideX, offsetX, beta, y, strideY, offsetY ) {
	var lenx;
	var leny;
	var temp;
	var ix;
	var iy;
	var jx;
	var jy;
	var kx;
	var ky;
	var i;
	var j;

	if ( !isLayout( order ) ) {
		throw new TypeError( 'invalid argument. First argument must be a valid order. Value: `%s`.', order );
	}
	if ( !isMatrixTranspose( trans ) ) {
		throw new TypeError( 'invalid argument. Second argument must specify whether to take transpose, conjugate-transpose or none. Value: `%s`.', trans );
	}
	if( M < 0 ) {
		throw new RangeError( 'invalid argument. Third argument must be a nonnegative integer. Value: `%d`.', M );
	}
	if( N < 0 ) {
		throw new RangeError( 'invalid argument. Fourth argument must be a nonnegative integer. Value: `%d`.', N );
	}
	if( LDA < max( 1, M ) ) {
		throw new RangeError( 'invalid argument. Seventh argument must be greater than or equal to max(1,M). Value: `%d`.', LDA );
	}
	if( strideX === 0 ) {
		throw new RangeError( 'invalid argument. Ninth argument must be non-zero.' );
	}
	if( strideY === 0 ) {
		throw new RangeError( 'invalid argument. Thirteenth argument must be non-zero.' );
	}
	// Check if we can early return...
	if ( M === 0 || N === 0 || ( alpha === 0.0 && beta === 1.0 ) ) {
		return y;
	}
	if ( trans === 'none' ) {
		lenx = N;
		leny = M;
	} else {
		lenx = M;
		leny = N;
	}
	kx = offsetX;
	ky = offsetY;
	// y = beta*y
	iy = ky;
	if ( beta !== 1.0 ) {
		if( beta === 0.0 ) {
			sfill( leny, 0.0, y, strideY );
		} else {
			for( i = 0; i < leny; i++ ) {
				y[ iy ] *= beta;
				iy += strideY;
			}
		}
	}
	if ( alpha === 0.0 ) {
		return y;
	}
	if ( ( trans === 'none' && order === 'column-major' ) || ( trans !== 'none' && order === 'row-major' ) ) {
		// Form y = alpha*A*x + y
		jx = kx;
		for ( i = 0; i < N; i++ ) {
			if ( x[ jx ] !== 0.0 ) {
				temp = f32( alpha * x[ jx ] );
				iy = ky;
				for ( j = 0; j < M; j++ ) {
					y[ iy ] += f32( A[ i * LDA + j ] * temp );
					iy += strideY;
				}
			}
			jx += strideX;
		}
	} else {
		// Form y = alpha*A**T*x + y
		jy = ky;
		for ( i = 0; i < M; i++ ) {
			temp = 0.0;
			ix = kx;
			for ( j = 0; j < N; j++ ) {
				temp += f32( A[ i * LDA + j ] * x[ ix ] );
				ix += strideX;
			}
			y[ jy ] += f32( alpha * temp );
			jy += strideY;
		}
	}
	return y;
}


// EXPORTS //

module.exports = sgemv;
