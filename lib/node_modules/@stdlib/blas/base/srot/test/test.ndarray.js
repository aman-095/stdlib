/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var tape = require( 'tape' );
var Float32Array = require( '@stdlib/array/float32' );
var dcopy = require( '@stdlib/blas/base/dcopy' ).ndarray;
var EPS = require( '@stdlib/constants/float32/eps' );
var abs = require( '@stdlib/math/base/special/abs' );
var srot = require( './../lib/ndarray.js' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.strictEqual( typeof srot, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function has an arity of 9', function test( t ) {
	t.strictEqual( srot.length, 9, 'returns expected value' );
	t.end();
});

tape( 'the function applies a plane rotation', function test( t ) {
	var xexpected;
	var yexpected;
	var ixvalues;
	var iyvalues;
	var nvalues;
	var xoffset;
	var xvalues;
	var yoffset;
	var yvalues;
	var delta;
	var tol;
	var out;
	var ex;
	var ey;
	var c;
	var i;
	var j;
	var k;
	var x;
	var y;

	xexpected = [
		[ 0.6, 0.10, -0.5, 0.8, 0.9, -0.3, -0.4 ],
		[ 0.78, 0.10, -0.5, 0.8, 0.9, -0.3, -0.4 ],
		[ 0.78, -0.46, -0.5, 0.8, 0.9, -0.3, -0.4 ],
		[ 0.78, -0.46, -0.22, 1.06, 0.9, -0.3, -0.4 ],
		[ 0.6, 0.10, -0.5, 0.8, 0.9, -0.3, -0.4 ],
		[ 0.78, 0.10, -0.5, 0.8, 0.9, -0.3, -0.4 ],
		[ 0.66, 0.1, -0.1, 0.8, 0.9, -0.3, -0.4 ],
		[ 0.96, 0.1, -0.76, 0.8, 0.9, -0.3, -0.020000005140900612 ],
		[ 0.6, 0.10, -0.5, 0.8, 0.9, -0.3, -0.4 ],
		[ 0.78, 0.10, -0.5, 0.8, 0.9, -0.3, -0.4 ],
		[ -0.059999965131282806, 0.1, -0.1, 0.8, 0.9, -0.3, -0.4 ],
		[ 0.9, 0.1, -0.22, 0.8, 0.18, -0.3, -0.020000005140900612 ],
		[ 0.6, 0.10, -0.5, 0.8, 0.9, -0.3, -0.4 ],
		[ 0.78, 0.10, -0.5, 0.8, 0.9, -0.3, -0.4 ],
		[ 0.78, 0.26, -0.5, 0.8, 0.9, -0.3, -0.4 ],
		[ 0.78, 0.26, -0.76, 1.12, 0.9, -0.3, -0.4 ]
	];
	yexpected = [
		[ 0.5, -0.9, 0.3, 0.7, -0.6, 0.2, 0.8 ],
		[ 0.039999984204769135, -0.9, 0.3, 0.7, -0.6, 0.2, 0.8 ],
		[ 0.039999984204769135, -0.78, 0.3, 0.7, -0.6, 0.2, 0.8 ],
		[ 0.039999984204769135, -0.78, 0.54, 0.07999998331069946, -0.6, 0.2, 0.8 ], // eslint-disable-line max-len
		[ 0.5, -0.9, 0.3, 0.7, -0.6, 0.2, 0.8 ],
		[ 0.039999984204769135, -0.9, 0.3, 0.7, -0.6, 0.2, 0.8 ],
		[ 0.7, -0.9, -0.12, 0.7, -0.6, 0.2, 0.8 ],
		[ 0.64, -0.9, -0.3, 0.7, -0.18, 0.2, 0.28000000000000014 ],
		[ 0.5, -0.9, 0.3, 0.7, -0.6, 0.2, 0.8 ],
		[ 0.039999984204769135, -0.9, 0.3, 0.7, -0.6, 0.2, 0.8 ],
		[ 0.7, -1.08, 0.3, 0.7, -0.6, 0.2, 0.8 ],
		[ 0.64, -1.26, 0.54, 0.2, -0.6, 0.2, 0.8 ],
		[ 0.5, -0.9, 0.3, 0.7, -0.6, 0.2, 0.8 ],
		[ 0.039999984204769135, -0.9, 0.3, 0.7, -0.6, 0.2, 0.8 ],
		[ 0.039999984204769135, -0.9, 0.18, 0.7, -0.6, 0.2, 0.8 ],
		[ 0.039999984204769135, -0.9, 0.18, 0.7, -0.18, 0.2, 0.16000000000000014 ] // eslint-disable-line max-len

	];
	nvalues = [ 0, 1, 2, 4 ];
	ixvalues = [ 1, 2, -2, -1 ];
	iyvalues = [ 1, -2, 1, -2 ];

	xvalues = [
		[ 0.6, 0.10, -0.5, 0.8, 0.9, -0.3, -0.4 ]
	];
	yvalues = [
		[ 0.5, -0.9, 0.3, 0.7, -0.6, 0.2, 0.8]
	];

	c = 0;
	for ( i = 0; i < ixvalues.length; i++ ) {
		for ( j = 0; j < nvalues.length; j++ ) {
			x = new Float32Array( xvalues[ 0 ] );
			y = new Float32Array( yvalues[ 0 ] );
			if ( ixvalues[ i ] < 0 ) {
				xoffset = ( 1 - nvalues[ j ] ) * ixvalues[ i ];
			} else {
				xoffset = 0;
			}
			if ( iyvalues[ i ] < 0 ) {
				yoffset = ( 1 - nvalues[ j ] ) * iyvalues[ i ];
			} else {
				yoffset = 0;
			}
			out = srot( nvalues[ j ], x, ixvalues[ i ], xoffset, y, iyvalues[ i ], yoffset, 0.8, 0.6 ); // eslint-disable-line max-len
			ex = new Float32Array( xexpected[ c ] );
			ey = new Float32Array( yexpected[ c ] );
			c += 1;
			for ( k = 0; k < ex.length; k++ ) {
				if ( x[ k ] === ex[ k ] ) {
					t.strictEqual( x[ k ], ex[ k ], 'returns expected value' );
				} else {
					delta = abs( x[ k ] - ex[ k ] );
					tol = 1.5 * EPS * abs( ex[ k ] );
					t.ok( delta <= tol, 'within tolerance. x: '+x[ k ]+'. expected: '+ex[ k ]+'. delta: '+delta+'. tol: '+tol+'.' );
				}
				if ( y[ k ] === ey[ k ] ) {
					t.strictEqual( y[ k ], ey[ k ], 'returns expected value' );
				} else {
					delta = abs( y[ k ] - ey[ k ] );
					tol = 1.5 * EPS * abs( ey[ k ] );
					t.ok( delta <= tol, 'within tolerance. y: '+y[ k ]+'. expected: '+ey[ k ]+'. delta: '+delta+'. tol: '+tol+'.' );
				}
				if ( out[ k ] === y[ k ] ) {
					t.strictEqual( out[ k ], y[ k ], 'returns expected value' );
				} else {
					delta = abs( out[ k ] - y[ k ] );
					tol = 1.5 * EPS * abs( y[ k ] );
					t.ok( delta <= tol, 'within tolerance. out: '+out[ k ]+'. expected: '+y[ k ]+'. delta: '+delta+'. tol: '+tol+'.' );
				}
			}
		}
	}
	t.end();
});

tape( 'the function supports an `x` stride', function test( t ) {
	var xe;
	var ye;
	var x;
	var y;

	x = new Float32Array([
		1.0, // 0
		2.0,
		3.0, // 1
		4.0,
		5.0  // 2
	]);
	y = new Float32Array([
		6.0, // 0
		7.0, // 1
		8.0, // 2
		9.0,
		10.0
	]);

	srot( 2, x, 2, 0, y, 1, 0, 0.707, 0.707 );

	xe = new Float32Array( [ 4.948999881744385, 2.0, 7.070000171661377, 4.0, 5.0 ] ); // eslint-disable-line max-len
	ye = new Float32Array( [ 3.5350000858306885, 2.828000068664551, 8.0, 9.0, 10.0 ] ); // eslint-disable-line max-len

	t.deepEqual( x, xe, 'returns expected value' );
	t.deepEqual( y, ye, 'returns expected value' );
	t.end();
});

tape( 'the function supports an `x` offset', function test( t ) {
	var xe;
	var ye;
	var x;
	var y;

	x = new Float32Array([
		1.0,
		2.0,
		3.0, // 0
		4.0, // 1
		5.0  // 2
	]);
	y = new Float32Array([
		6.0, // 0
		7.0, // 1
		8.0, // 2
		9.0,
		10.0
	]);

	srot( 2, x, 2, 2, y, 1, 0, 0.707, 0.707 );

	xe = new Float32Array( [ 1.0, 2.0, 6.36299991607666, 4.0, 8.484000205993652 ] ); // eslint-disable-line max-len
	ye = new Float32Array( [ 2.121000051498413, 1.4140000343322754, 8.0, 9.0, 10.0 ] ); // eslint-disable-line max-len

	t.deepEqual( x, xe, 'returns expected value' );
	t.deepEqual( y, ye, 'returns expected value' );
	t.end();
});

tape( 'the function supports a `y` stride', function test( t ) {
	var xe;
	var ye;
	var x;
	var y;

	x = new Float32Array([
		1.0, // 0
		2.0, // 1
		3.0, // 2
		4.0,
		5.0
	]);
	y = new Float32Array([
		6.0, // 0
		7.0,
		8.0, // 1
		9.0,
		10.0 // 2
	]);

	srot( 2, x, 1, 0, y, 2, 0, 0.707, 0.707 );

	xe = new Float32Array( [ 4.948999881744385, 7.070000171661377, 3.0, 4.0, 5.0 ] ); // eslint-disable-line max-len
	ye = new Float32Array( [ 3.5350000858306885, 7, 4.242000102996826, 9.0, 10.0 ] ); // eslint-disable-line max-len

	t.deepEqual( x, xe, 'returns expected value' );
	t.deepEqual( y, ye, 'returns expected value' );
	t.end();
});

tape( 'the function supports a `y` offset', function test( t ) {
	var xe;
	var ye;
	var x;
	var y;

	x = new Float32Array([
		1.0, // 0
		2.0, // 1
		3.0, // 2
		4.0,
		5.0
	]);
	y = new Float32Array([
		6.0,
		7.0,
		8.0, // 0
		9.0, // 1
		10.0 // 2
	]);

	srot( 2, x, 1, 0, y, 1, 2, 0.707, 0.707 );

	xe = new Float32Array( [ 6.36299991607666, 7.7769999504089355, 3.0, 4.0, 5.0 ] ); // eslint-disable-line max-len
	ye = new Float32Array( [ 6.0, 7.0, 4.948999881744385, 4.948999881744385, 10.0 ] ); // eslint-disable-line max-len

	t.deepEqual( x, xe, 'returns expected value' );
	t.deepEqual( y, ye, 'returns expected value' );
	t.end();
});

tape( 'the function returns a reference to the second input array', function test( t ) {
	var out;
	var x;
	var y;

	x = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );
	y = new Float32Array( [ 6.0, 7.0, 8.0, 9.0, 10.0 ] );

	out = srot( x.length, x, 1, 0, y, 1, 0 );

	t.strictEqual( out, y, 'returns expected value' );
	t.end();
});

tape( 'if provided an `N` parameter less than or equal to `0`, the function leaves both input arrays unchanged', function test( t ) {
	var xe;
	var ye;
	var x;
	var y;

	x = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );
	y = new Float32Array( [ 6.0, 7.0, 8.0, 9.0, 10.0 ] );

	xe = new Float32Array( x.length );
	dcopy( x.length, x, 1, 0, xe, 1, 0 );

	ye = new Float32Array( y.length );
	dcopy( y.length, y, 1, 0, ye, 1, 0 );

	srot( -1, x, 1, 0, y, 1, 0, 0.707, 0.707 );
	t.deepEqual( x, xe, 'returns expected value' );
	t.deepEqual( y, ye, 'returns expected value' );

	srot( 0, x, 1, 0, y, 1, 0, 0.707, 0.707 );
	t.deepEqual( x, xe, 'returns expected value' );
	t.deepEqual( y, ye, 'returns expected value' );

	t.end();
});

tape( 'the function supports negative strides', function test( t ) {
	var xe;
	var ye;
	var x;
	var y;

	x = new Float32Array([
		1.0, // 2
		2.0,
		3.0, // 1
		4.0,
		5.0  // 0
	]);
	y = new Float32Array([
		6.0,
		7.0, // 2
		8.0, // 1
		9.0, // 0
		10.0
	]);

	srot( 3, x, -2, 4, y, -1, 3, 0.707, 0.707 );

	xe = new Float32Array( [ 5.656000137329102, 2.0, 7.7769999504089355, 4.0, 9.89799976348877 ] ); // eslint-disable-line max-len
	ye = new Float32Array( [ 6.0, 4.242000102996826, 3.5350000858306885, 2.828000068664551, 10.0 ] ); // eslint-disable-line max-len

	t.deepEqual( x, xe, 'returns expected value' );
	t.deepEqual( y, ye, 'returns expected value' );
	t.end();
});

tape( 'the function supports complex access patterns', function test( t ) {
	var xe;
	var ye;
	var x;
	var y;

	x = new Float32Array([
		1.0,
		2.0, // 0
		3.0,
		4.0, // 1
		5.0,
		6.0  // 2
	]);
	y = new Float32Array([
		7.0,
		8.0,
		9.0,
		10.0, // 2
		11.0, // 1
		12.0  // 0
	]);

	srot( 3, x, 2, 1, y, -1, 5, 0.707, 0.707 );

	xe = new Float32Array( [ 1.0, 9.89799976348877, 3.0, 10.604999542236328, 5.0, 11.312000274658203 ] ); // eslint-disable-line max-len
	ye = new Float32Array( [ 7.0, 8.0, 9.0, 2.828000068664551, 4.948999881744385, 7.070000171661377 ] ); // eslint-disable-line max-len

	t.deepEqual( x, xe, 'returns expected value' );
	t.deepEqual( y, ye, 'returns expected value' );
	t.end();
});
