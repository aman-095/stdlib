/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var abs = require( '@stdlib/math/base/special/abs' );
var imag = require( '@stdlib/complex/imag' );
var real = require( '@stdlib/complex/real' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );


// MAIN //

/**
* Finds the euclidean norm of a complex double-precision floating-point vector.
*
* @param {PositiveInteger} N - number of indexed elements
* @param {Complex128Array} zx - input array
* @param {NonNegativeInteger} strideX - `zx` stride length
* @param {NonNegativeInteger} offsetX - starting index for `zx`
* @returns {number} index value
*
* @example
* var Complex128Array = require( '@stdlib/array/complex128' );
*
* var zx = new Complex128Array( [ 0.3, 0.1, 0.5, 0.0, 0.0, 0.5, 0.0, 0.2, 2.0, 3.0 ] );
*
* var norm = dznrm2( 4, zx, 1, 0 );
* // returns ~0.8
*/
function dznrm2( N, zx, strideX, offsetX ) {
	var scale;
	var norm;
	var temp;
	var ssq;
	var ix;

	if ( N < 1 || strideX < 0 ) {
		return 0.0;
	}
	scale = 0.0;
	ssq = 1.0;
	for ( ix = offsetX; ix <= ( N - 1 ) * strideX; ix += strideX ) {
		if ( real( zx.get( ix ) ) !== 0.0 ) {
			temp = abs( real( zx.get( ix ) ) );
			if ( scale < temp ) {
				ssq = 1.0 + ( ssq * ( scale / temp ) * ( scale / temp ) );
				scale = temp;
			} else {
				ssq += ( ( temp / scale ) * ( temp / scale ) );
			}
		}
		if ( imag( zx.get( ix ) ) !== 0.0 ) {
			temp = abs( imag( zx.get( ix ) ) );
			if ( scale < temp ) {
				ssq = 1.0 + ( ssq * ( scale / temp ) * ( scale / temp ) );
				scale = temp;
			} else {
				ssq += ( ( temp / scale ) * ( temp / scale ) );
			}
		}
		norm = scale * sqrt( ssq );
	}
	return norm;
}


// EXPORTS //

module.exports = dznrm2;
