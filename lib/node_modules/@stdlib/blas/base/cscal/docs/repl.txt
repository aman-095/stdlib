
{{alias}}( N, cx, x, strideX )
    Scales values of complex single-precision floating-point vector by
    another complex single-precision floating-point constant.

    The `N` and stride parameters determine how values from `x` are scaled by
    `cx`.

    Indexing is relative to the first index. To introduce an offset, use typed
    array views.

    If `N` is less than or equal to `0`, the function returns `y` unchanged.

    Parameters
    ----------
    N: integer
        Number of indexed elements.

    cx: Complex64Array
        Constant array.

    x: Complex64Array
        Input array.

    strideX: integer
        Index increment for `x`.

    Returns
    -------
    x: Complex64Array
        Output array.

    Examples
    --------
    // Standard usage:
    > var x = new {{alias:@stdlib/array/complex64}}( [ 1.0, 2.0, 3.0, 4.0 ] );
    > var cx = new {{alias:@stdlib/array/complex64}}( [ 1.0, 2.0 ] );
    > {{alias}}( x.length, cx, x, 1 );
    > var z = x.get( 0 );
    > var re = {{alias:@stdlib/complex/realf}}( z )
    -3.0
    > var im = {{alias:@stdlib/complex/imag}}( z )
    4.0

    // Advanced indexing:
    > x = new {{alias:@stdlib/array/complex64}}( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );
    > cx = new {{alias:@stdlib/array/complex64}}( [ 1.0, 1.0 ] );
    > {{alias}}( 2, cx, x, 2 );
    > z = x.get( 0 );
    > re = {{alias:@stdlib/complex/realf}}( z )
    -1.0
    > im = {{alias:@stdlib/complex/imag}}( z )
    3.0

    // Using typed array views:
    > var x0 = new {{alias:@stdlib/array/complex64}}( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );
    > var x1 = new {{alias:@stdlib/array/complex64}}( x0.buffer, x0.BYTES_PER_ELEMENT*1 );
    > var cx = new {{alias:@stdlib/array/complex64}}( [ 2.0, 2.0 ] );
    > {{alias}}( 3, cx, x1, 1 );
    > z = x0.get( 1 );
    > re = {{alias:@stdlib/complex/realf}}( z )
    -2.0
    > im = {{alias:@stdlib/complex/imag}}( z )
    14.0


{{alias}}.ndarray( N, cx, x, strideX, offsetX )
    Scales a complex single-precision floating-point vector by a single-precision
    floating point constant.

    While typed array views mandate a view offset based on the underlying
    buffer, the offset parameters support indexing semantics based on starting
    indices.

    Parameters
    ----------
    N: integer
        Number of indexed elements.

    cx: Complex64Array
        Constant array.

    x: Complex64Array
        Input array.

    strideX: integer
        Index increment for `x`.

    offsetX: integer
        Starting index for `x`.

    Returns
    -------
    x: Complex64Array
        Output array.

    Examples
    --------
    // Standard usage:
    > var x = new {{alias:@stdlib/array/complex64}}( [ 1.0, 2.0, 3.0, 4.0 ] );
    > var cx = new {{alias:@stdlib/array/complex64}}( [ 2.0, 2.0 ] );
    > {{alias}}.ndarray( x.length, cx, x, 1, 0 );
    > var z = x.get( 0 );
    > var re = {{alias:@stdlib/complex/realf}}( z )
    -2.0
    > var im = {{alias:@stdlib/complex/imag}}( z )
    6.0

    // Advanced indexing:
    > x = new {{alias:@stdlib/array/complex64}}( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );
    > cx = new {{alias:@stdlib/array/complex64}}( [ 1.0, 2.0 ] );
    > {{alias}}.ndarray( 2, cx, x, 1, 2 );
    > z = x.get( 2 );
    > re = {{alias:@stdlib/complex/realf}}( z )
    -7.0
    > im = {{alias:@stdlib/complex/imag}}( z )
    16.0

    See Also
    --------

