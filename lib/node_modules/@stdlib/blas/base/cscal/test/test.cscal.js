/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var tape = require( 'tape' );
var Float32Array = require( '@stdlib/array/float32' );
var Complex64Array = require( '@stdlib/array/complex64' );
var EPS = require( '@stdlib/constants/float32/eps' );
var abs = require( '@stdlib/math/base/special/abs' );
var cscal = require( './../lib/cscal.js' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.strictEqual( typeof cscal, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function has an arity of 4', function test( t ) {
	t.strictEqual( cscal.length, 4, 'arity of 4' );
	t.end();
});

tape( 'the function scales elements from `x` by `cx`', function test( t ) {
	var expected;
	var delta;
	var tol;
	var viewX;
	var cx;
	var k;
	var x;

	x = new Complex64Array( [ 0.3, 0.1, 0.5, 0.0, 0.0, 0.5, 0.0, 0.2, 2.0, 3.0, 2.0, 3.0, 2.0, 3.0, 2.0, 3.0 ] );
	cx = new Complex64Array( [ 0.4, -0.7 ] );

	cscal( 4, cx, x, 1 );

	viewX = new Float32Array( x.buffer );
	expected = new Float32Array( [ 0.19, -0.17, 0.2, -0.35, 0.35, 0.2, 0.14, 0.08, 2.0, 3.0, 2.0, 3.0, 2.0, 3.0, 2.0, 3.0 ] );
	for ( k = 0; k < expected.length; k++ ) {
		if ( viewX[ k ] === expected[ k ] ) {
			t.strictEqual( viewX[ k ], expected[ k ], 'returns expected value' );
		}
		else {
			delta = abs( viewX[ k ] - expected[ k ] );
			tol = 1.0 * EPS * abs( expected[ k ] );
			t.ok( delta <= tol, 'within tolerance. x: '+viewX[ k ]+'. expected: '+expected[ k ]+'. delta: '+delta+'. tol: '+tol+'.' );
		}
	}
	t.end();
});

tape( 'the function supports an `x` stride', function test( t ) {
	var expected;
	var delta;
	var tol;
	var viewX;
	var cx;
	var k;
	var x;

	x = new Complex64Array( [ 0.1, 0.1, 3.0, 6.0, -0.6, 0.1, 4.0, 7.0, 0.1, -0.3, 7.0, 2.0, 2.0, 3.0, 2.0, 3.0 ] );
	cx = new Complex64Array( [ 0.4, -0.7 ] );

	cscal( 3, cx, x, 2 );

	viewX = new Float32Array( x.buffer );
	expected = new Float32Array( [ 0.11, -0.03, 3.0, 6.0, -0.17, 0.46, 4.0, 7.0, -0.17, -0.19, 7.0, 2.0, 2.0, 3.0, 2.0, 3.0 ] );
	for ( k = 0; k < expected.length; k++ ) {
		if ( viewX[ k ] === expected[ k ] ) {
			t.strictEqual( viewX[ k ], expected[ k ], 'returns expected value' );
		}
		else {
			delta = abs( viewX[ k ] - expected[ k ] );
			tol = 1.0 * EPS * abs( expected[ k ] );
			t.ok( delta <= tol, 'within tolerance. x: '+viewX[ k ]+'. expected: '+expected[ k ]+'. delta: '+delta+'. tol: '+tol+'.' );
		}
	}
	t.end();
});

tape( 'the function returns a reference to the output array', function test( t ) {
	var out;
	var cx;
	var x;

	x = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );
	cx = new Complex64Array( [ 2.0, 2.0 ] );

	out = cscal( x.length, cx, x, 1 );

	t.strictEqual( out, x, 'same reference' );
	t.end();
});

tape( 'if provided an `N` parameter less than or equal to `0`, the function returns the output array unchanged', function test( t ) {
	var expected;
	var viewX;
	var cx;
	var x;

	x = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );
	cx = new Complex64Array( [ 2.0, 2.0 ] );

	viewX = new Float32Array( x.buffer );
	expected = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );

	cscal( -1, cx, x, 1 );
	t.deepEqual( viewX, expected, 'returns expected value' );

	cscal( 0, cx, x, 1 );
	t.deepEqual( viewX, expected, 'returns expected value' );

	t.end();
});

tape( 'if provided an `strideX` parameter less than or equal to `0`, the function returns the output array unchanged', function test( t ) {
	var expected;
	var viewX;
	var cx;
	var x;

	x = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );
	cx = new Complex64Array( [ 2.0, 2.0 ] );

	viewX = new Float32Array( x.buffer );
	expected = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );

	cscal( 4, cx, x, -1 );
	t.deepEqual( viewX, expected, 'returns expected value' );

	cscal( 4, cx, x, 0 );
	t.deepEqual( viewX, expected, 'returns expected value' );

	t.end();
});

tape( 'the function supports complex access patterns', function test( t ) {
	var expected;
	var delta;
	var tol;
	var viewX;
	var cx;
	var k;
	var x;

	x = new Complex64Array( [ 0.1, -0.3, 8.0, 9.0, 0.5, -0.1, 2.0, 5.0, 2.0, 3.0, 2.0, 3.0, 2.0, 3.0, 2.0, 3.0 ] );
	cx = new Complex64Array( [ 0.4, -0.7 ] );

	cscal( 2, cx, x, 2 );

	viewX = new Float32Array( x.buffer );
	expected = new Float32Array( [ -0.17, -0.19, 8.0, 9.0, 0.13, -0.39, 2.0, 5.0, 2.0, 3.0, 2.0, 3.0, 2.0, 3.0, 2.0, 3.0 ] );
	for ( k = 0; k < expected.length; k++ ) {
		if ( viewX[ k ] === expected[ k ] ) {
			t.strictEqual( viewX[ k ], expected[ k ], 'returns expected value' );
		}
		else {
			delta = abs( viewX[ k ] - expected[ k ] );
			tol = 1.0 * EPS * abs( expected[ k ] );
			t.ok( delta <= tol, 'within tolerance. x: '+viewX[ k ]+'. expected: '+expected[ k ]+'. delta: '+delta+'. tol: '+tol+'.' );
		}
	}
	t.end();
});

tape( 'the function supports view offsets', function test( t ) {
	var expected;
	var delta;
	var viewX;
	var tol;
	var cx;
	var x0;
	var x1;
	var k;

	// Initial arrays...
	x0 = new Complex64Array( [ 0.1, -0.3, 8.0, 9.0, 0.5, -0.1, 2.0, 5.0, 2.0, 3.0, 2.0, 3.0, 2.0, 3.0, 2.0, 3.0 ] );
	cx = new Complex64Array( [ 0.4, -0.7 ] );

	// Create offset views...
	x1 = new Complex64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 ); // begin at 2nd element

	cscal( 3, cx, x1, 1 );

	viewX = new Float32Array( x0.buffer );
	expected = new Float32Array( [ 0.1, -0.3, 9.5, -2.0, 0.13, -0.39, 4.3, 0.6, 2.0, 3.0, 2.0, 3.0, 2.0, 3.0, 2.0, 3.0 ] );
	for ( k = 0; k < expected.length; k++ ) {
		if ( viewX[ k ] === expected[ k ] ) {
			t.strictEqual( viewX[ k ], expected[ k ], 'returns expected value' );
		}
		else {
			delta = abs( viewX[ k ] - expected[ k ] );
			tol = 1.0 * EPS * abs( expected[ k ] );
			t.ok( delta <= tol, 'within tolerance. x: '+viewX[ k ]+'. expected: '+expected[ k ]+'. delta: '+delta+'. tol: '+tol+'.' );
		}
	}
	t.end();
});
