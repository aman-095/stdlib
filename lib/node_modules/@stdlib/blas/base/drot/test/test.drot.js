/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var tape = require( 'tape' );
var Float64Array = require( '@stdlib/array/float64' );
var dcopy = require( '@stdlib/blas/base/dcopy' );
var EPS = require( '@stdlib/constants/float64/eps' );
var abs = require( '@stdlib/math/base/special/abs' );
var drot = require( './../lib/drot.js' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.strictEqual( typeof drot, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function has an arity of 7', function test( t ) {
	t.strictEqual( drot.length, 7, 'returns expected value' );
	t.end();
});

tape( 'the function applies a plane rotation with x stride as 1 and y stride as 1', function test( t ) {
	var xexpected;
	var yexpected;
	var nvalues;
	var xvalues;
	var yvalues;
	var delta;
	var tol;
	var out;
	var ex;
	var ey;
	var ix;
	var iy;
	var c;
	var j;
	var k;
	var x;
	var y;

	xexpected = [
		[ 0.6, 0.10, -0.5, 0.8, 0.9, -0.3, -0.4 ],
		[ 0.78, 0.10, -0.5, 0.8, 0.9, -0.3, -0.4 ],
		[ 0.78, -0.46, -0.5, 0.8, 0.9, -0.3, -0.4 ],
		[ 0.78, -0.46, -0.22, 1.06, 0.9, -0.3, -0.4 ]
	];
	yexpected = [
		[ 0.5, -0.9, 0.3, 0.7, -0.6, 0.2, 0.8 ],
		[ 0.04, -0.9, 0.3, 0.7, -0.6, 0.2, 0.8 ],
		[ 0.04, -0.78, 0.3, 0.7, -0.6, 0.2, 0.8 ],
		[ 0.04, -0.78, 0.54, 0.08, -0.6, 0.2, 0.8 ]
	];
	nvalues = [ 0, 1, 2, 4 ];
	ix = 1;
	iy = 1;

	xvalues = [
		[ 0.6, 0.10, -0.5, 0.8, 0.9, -0.3, -0.4 ]
	];
	yvalues = [
		[ 0.5, -0.9, 0.3, 0.7, -0.6, 0.2, 0.8 ]
	];

	c = 0;
	for ( j = 0; j < nvalues.length; j++ ) {
		x = new Float64Array( xvalues[ 0 ] );
		y = new Float64Array( yvalues[ 0 ] );
		out = drot( nvalues[ j ], x, ix, y, iy, 0.8, 0.6 );
		ex = new Float64Array( xexpected[ c ] );
		ey = new Float64Array( yexpected[ c ] );
		c += 1;
		for ( k = 0; k < ex.length; k++ ) {
			if ( x[ k ] === ex[ k ] ) {
				t.strictEqual( x[ k ], ex[ k ], 'returns expected value' );
			} else {
				delta = abs( x[ k ] - ex[ k ] );
				tol = 4.0 * EPS * abs( ex[ k ] );
				t.ok( delta <= tol, 'within tolerance. x: '+x[ k ]+'. expected: '+ex[ k ]+'. delta: '+delta+'. tol: '+tol+'.' );
			}
			if ( y[ k ] === ey[ k ] ) {
				t.strictEqual( y[ k ], ey[ k ], 'returns expected value' );
			} else {
				delta = abs( y[ k ] - ey[ k ] );
				tol = 4.0 * EPS * abs( ey[ k ] );
				t.ok( delta <= tol, 'within tolerance. y: '+y[ k ]+'. expected: '+ey[ k ]+'. delta: '+delta+'. tol: '+tol+'.' );
			}
			if ( out[ k ] === y[ k ] ) {
				t.strictEqual( out[ k ], y[ k ], 'returns expected value' );
			} else {
				delta = abs( out[ k ] - y[ k ] );
				tol = 4.0 * EPS * abs( y[ k ] );
				t.ok( delta <= tol, 'within tolerance. out: '+out[ k ]+'. expected: '+y[ k ]+'. delta: '+delta+'. tol: '+tol+'.' );
			}
		}
	}
	t.end();
});

tape( 'the function applies a plane rotation with x stride as 2 and y stride as -2', function test( t ) {
	var xexpected;
	var yexpected;
	var nvalues;
	var xvalues;
	var yvalues;
	var delta;
	var tol;
	var out;
	var ex;
	var ey;
	var ix;
	var iy;
	var c;
	var j;
	var k;
	var x;
	var y;

	xexpected = [
		[ 0.6, 0.10, -0.5, 0.8, 0.9, -0.3, -0.4 ],
		[ 0.78, 0.10, -0.5, 0.8, 0.9, -0.3, -0.4 ],
		[ 0.66, 0.1, -0.1, 0.8, 0.9, -0.3, -0.4 ],
		[ 0.96, 0.1, -0.76, 0.8, 0.9, -0.3, -0.02]
	];
	yexpected = [
		[ 0.5, -0.9, 0.3, 0.7, -0.6, 0.2, 0.8 ],
		[ 0.04, -0.9, 0.3, 0.7, -0.6, 0.2, 0.8 ],
		[ 0.7, -0.9, -0.12, 0.7, -0.6, 0.2, 0.8 ],
		[ 0.64, -0.9, -0.3, 0.7, -0.18, 0.2, 0.28 ]
	];
	nvalues = [ 0, 1, 2, 4 ];
	ix = 2;
	iy = -2;

	xvalues = [
		[ 0.6, 0.10, -0.5, 0.8, 0.9, -0.3, -0.4 ]
	];
	yvalues = [
		[ 0.5, -0.9, 0.3, 0.7, -0.6, 0.2, 0.8 ]
	];

	c = 0;
	for ( j = 0; j < nvalues.length; j++ ) {
		x = new Float64Array( xvalues[ 0 ] );
		y = new Float64Array( yvalues[ 0 ] );
		out = drot( nvalues[ j ], x, ix, y, iy, 0.8, 0.6 );
		ex = new Float64Array( xexpected[ c ] );
		ey = new Float64Array( yexpected[ c ] );
		c += 1;
		for ( k = 0; k < ex.length; k++ ) {
			if ( x[ k ] === ex[ k ] ) {
				t.strictEqual( x[ k ], ex[ k ], 'returns expected value' );
			} else {
				delta = abs( x[ k ] - ex[ k ] );
				tol = 20.0 * EPS * abs( ex[ k ] );
				t.ok( delta <= tol, 'within tolerance. x: '+x[ k ]+'. expected: '+ex[ k ]+'. delta: '+delta+'. tol: '+tol+'.' );
			}
			if ( y[ k ] === ey[ k ] ) {
				t.strictEqual( y[ k ], ey[ k ], 'returns expected value' );
			} else {
				delta = abs( y[ k ] - ey[ k ] );
				tol = 20.0 * EPS * abs( ey[ k ] );
				t.ok( delta <= tol, 'within tolerance. y: '+y[ k ]+'. expected: '+ey[ k ]+'. delta: '+delta+'. tol: '+tol+'.' );
			}
			if ( out[ k ] === y[ k ] ) {
				t.strictEqual( out[ k ], y[ k ], 'returns expected value' );
			} else {
				delta = abs( out[ k ] - y[ k ] );
				tol = 20.0 * EPS * abs( y[ k ] );
				t.ok( delta <= tol, 'within tolerance. out: '+out[ k ]+'. expected: '+y[ k ]+'. delta: '+delta+'. tol: '+tol+'.' );
			}
		}
	}
	t.end();
});

tape( 'the function applies a plane rotation with x stride as -2 and y stride as 1', function test( t ) {
	var xexpected;
	var yexpected;
	var nvalues;
	var xvalues;
	var yvalues;
	var delta;
	var tol;
	var out;
	var ex;
	var ey;
	var ix;
	var iy;
	var c;
	var j;
	var k;
	var x;
	var y;

	xexpected = [
		[ 0.6, 0.10, -0.5, 0.8, 0.9, -0.3, -0.4 ],
		[ 0.78, 0.10, -0.5, 0.8, 0.9, -0.3, -0.4 ],
		[ -0.06, 0.1, -0.1, 0.8, 0.9, -0.3, -0.4 ],
		[ 0.9, 0.1, -0.22, 0.8, 0.18, -0.3, -0.02]
	];
	yexpected = [
		[ 0.5, -0.9, 0.3, 0.7, -0.6, 0.2, 0.8 ],
		[ 0.04, -0.9, 0.3, 0.7, -0.6, 0.2, 0.8 ],
		[ 0.7, -1.08, 0.3, 0.7, -0.6, 0.2, 0.8 ],
		[ 0.64, -1.26, 0.54, 0.2, -0.6, 0.2, 0.8 ]
	];
	nvalues = [ 0, 1, 2, 4 ];
	ix = -2;
	iy = 1;

	xvalues = [
		[ 0.6, 0.10, -0.5, 0.8, 0.9, -0.3, -0.4 ]
	];
	yvalues = [
		[ 0.5, -0.9, 0.3, 0.7, -0.6, 0.2, 0.8 ]
	];

	c = 0;
	for ( j = 0; j < nvalues.length; j++ ) {
		x = new Float64Array( xvalues[ 0 ] );
		y = new Float64Array( yvalues[ 0 ] );
		out = drot( nvalues[ j ], x, ix, y, iy, 0.8, 0.6 );
		ex = new Float64Array( xexpected[ c ] );
		ey = new Float64Array( yexpected[ c ] );
		c += 1;
		for ( k = 0; k < ex.length; k++ ) {
			if ( x[ k ] === ex[ k ] ) {
				t.strictEqual( x[ k ], ex[ k ], 'returns expected value' );
			} else {
				delta = abs( x[ k ] - ex[ k ] );
				tol = 20.0 * EPS * abs( ex[ k ] );
				t.ok( delta <= tol, 'within tolerance. x: '+x[ k ]+'. expected: '+ex[ k ]+'. delta: '+delta+'. tol: '+tol+'.' );
			}
			if ( y[ k ] === ey[ k ] ) {
				t.strictEqual( y[ k ], ey[ k ], 'returns expected value' );
			} else {
				delta = abs( y[ k ] - ey[ k ] );
				tol = 20.0 * EPS * abs( ey[ k ] );
				t.ok( delta <= tol, 'within tolerance. y: '+y[ k ]+'. expected: '+ey[ k ]+'. delta: '+delta+'. tol: '+tol+'.' );
			}
			if ( out[ k ] === y[ k ] ) {
				t.strictEqual( out[ k ], y[ k ], 'returns expected value' );
			} else {
				delta = abs( out[ k ] - y[ k ] );
				tol = 20.0 * EPS * abs( y[ k ] );
				t.ok( delta <= tol, 'within tolerance. out: '+out[ k ]+'. expected: '+y[ k ]+'. delta: '+delta+'. tol: '+tol+'.' );
			}
		}
	}
	t.end();
});

tape( 'the function applies a plane rotation with x stride as -1 and y stride as -2', function test( t ) {
	var xexpected;
	var yexpected;
	var nvalues;
	var xvalues;
	var yvalues;
	var delta;
	var tol;
	var out;
	var ex;
	var ey;
	var ix;
	var iy;
	var c;
	var j;
	var k;
	var x;
	var y;

	xexpected = [
		[ 0.6, 0.10, -0.5, 0.8, 0.9, -0.3, -0.4 ],
		[ 0.78, 0.10, -0.5, 0.8, 0.9, -0.3, -0.4 ],
		[ 0.78, 0.26, -0.5, 0.8, 0.9, -0.3, -0.4 ],
		[ 0.78, 0.26, -0.76, 1.12, 0.9, -0.3, -0.4 ]
	];
	yexpected = [
		[ 0.5, -0.9, 0.3, 0.7, -0.6, 0.2, 0.8 ],
		[ 0.04, -0.9, 0.3, 0.7, -0.6, 0.2, 0.8 ],
		[ 0.04, -0.9, 0.18, 0.7, -0.6, 0.2, 0.8 ],
		[ 0.04, -0.9, 0.18, 0.7, -0.18, 0.2, 0.16 ]
	];
	nvalues = [ 0, 1, 2, 4 ];
	ix = -1;
	iy = -2;

	xvalues = [
		[ 0.6, 0.10, -0.5, 0.8, 0.9, -0.3, -0.4 ]
	];
	yvalues = [
		[ 0.5, -0.9, 0.3, 0.7, -0.6, 0.2, 0.8 ]
	];

	c = 0;
	for ( j = 0; j < nvalues.length; j++ ) {
		x = new Float64Array( xvalues[ 0 ] );
		y = new Float64Array( yvalues[ 0 ] );
		out = drot( nvalues[ j ], x, ix, y, iy, 0.8, 0.6 );
		ex = new Float64Array( xexpected[ c ] );
		ey = new Float64Array( yexpected[ c ] );
		c += 1;
		for ( k = 0; k < ex.length; k++ ) {
			if ( x[ k ] === ex[ k ] ) {
				t.strictEqual( x[ k ], ex[ k ], 'returns expected value' );
			} else {
				delta = abs( x[ k ] - ex[ k ] );
				tol = 4.0 * EPS * abs( ex[ k ] );
				t.ok( delta <= tol, 'within tolerance. x: '+x[ k ]+'. expected: '+ex[ k ]+'. delta: '+delta+'. tol: '+tol+'.' );
			}
			if ( y[ k ] === ey[ k ] ) {
				t.strictEqual( y[ k ], ey[ k ], 'returns expected value' );
			} else {
				delta = abs( y[ k ] - ey[ k ] );
				tol = 4.0 * EPS * abs( ey[ k ] );
				t.ok( delta <= tol, 'within tolerance. y: '+y[ k ]+'. expected: '+ey[ k ]+'. delta: '+delta+'. tol: '+tol+'.' );
			}
			if ( out[ k ] === y[ k ] ) {
				t.strictEqual( out[ k ], y[ k ], 'returns expected value' );
			} else {
				delta = abs( out[ k ] - y[ k ] );
				tol = 4.0 * EPS * abs( y[ k ] );
				t.ok( delta <= tol, 'within tolerance. out: '+out[ k ]+'. expected: '+y[ k ]+'. delta: '+delta+'. tol: '+tol+'.' );
			}
		}
	}
	t.end();
});

tape( 'the function supports an `x` stride', function test( t ) {
	var xe;
	var ye;
	var x;
	var y;
	var N;

	x = new Float64Array([
		1.0, // 0
		2.0,
		3.0, // 1
		4.0,
		5.0  // 2
	]);
	y = new Float64Array([
		6.0, // 0
		7.0, // 1
		8.0, // 2
		9.0,
		10.0
	]);
	N = 2;

	drot( N, x, 2, y, 1, 0.707, 0.707 );

	xe = new Float64Array( [ 4.949, 2.0, 7.07, 4.0, 5.0 ] );
	ye = new Float64Array( [ 3.535, 2.828, 8.0, 9.0, 10.0 ] );

	t.deepEqual( x, xe, 'returns expected value' );
	t.deepEqual( y, ye, 'returns expected value' );
	t.end();
});

tape( 'the function supports a `y` stride', function test( t ) {
	var delta;
	var tol;
	var xe;
	var ye;
	var k;
	var x;
	var y;

	x = new Float64Array([
		1.0, // 0
		2.0, // 1
		3.0, // 2
		4.0,
		5.0
	]);
	y = new Float64Array([
		6.0, // 0
		7.0,
		8.0, // 1
		9.0,
		10.0 // 2
	]);

	drot( x.length, x, 2, y, 2, 0.8, 0.6 );

	xe = new Float64Array( [ 4.4, 2.0, 7.2, 4.0, 10.0 ] );
	ye = new Float64Array( [ 4.2, 7.0, 4.6, 9.0, 5.0 ] );
	for ( k = 0; k < xe.length; k++ ) {
		if ( x[ k ] === xe[ k ] ) {
			t.strictEqual( x[ k ], xe[ k ], 'returns expected value' );
		}
		else {
			delta = abs( x[ k ] - xe[ k ] );
			tol = 2.0 * EPS * abs( xe[ k ] );
			t.ok( delta <= tol, 'within tolerance. x: '+x[ k ]+'. expected: '+xe[ k ]+'. delta: '+delta+'. tol: '+tol+'.' );
		}
		if ( y[ k ] === ye[ k ] ) {
			t.strictEqual( y[ k ], ye[ k ], 'returns expected value' );
		}
		else {
			delta = abs( y[ k ] - ye[ k ] );
			tol = 2.0 * EPS * abs( ye[ k ] );
			t.ok( delta <= tol, 'within tolerance. x: '+y[ k ]+'. expected: '+ye[ k ]+'. delta: '+delta+'. tol: '+tol+'.' );
		}
	}
	t.end();
});

tape( 'the function returns a reference to the second input array', function test( t ) {
	var out;
	var x;
	var y;

	x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );
	y = new Float64Array( [ 6.0, 7.0, 8.0, 9.0, 10.0 ] );

	out = drot( x.length, x, 1, y, 1, 1, 0 );

	t.strictEqual( out, y, 'returns expected value' );
	t.end();
});

tape( 'if provided an `N` parameter less than or equal to `0`, the function leaves both input arrays unchanged', function test( t ) {
	var xe;
	var ye;
	var x;
	var y;

	x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );
	y = new Float64Array( [ 6.0, 7.0, 8.0, 9.0, 10.0 ] );

	xe = new Float64Array( x.length );
	dcopy( x.length, x, 1, xe, 1 );

	ye = new Float64Array( y.length );
	dcopy( y.length, y, 1, ye, 1 );

	drot( -1, x, 1, y, 1, 0.707, 0.707 );
	t.deepEqual( x, xe, 'returns expected value' );
	t.deepEqual( y, ye, 'returns expected value' );

	drot( 0, x, 1, y, 1, 0.707, 0.707 );
	t.deepEqual( x, xe, 'returns expected value' );
	t.deepEqual( y, ye, 'returns expected value' );

	t.end();
});

tape( 'the function supports negative strides', function test( t ) {
	var delta;
	var tol;
	var xe;
	var ye;
	var k;
	var x;
	var y;
	var N;

	x = new Float64Array([
		1.0, // 2
		2.0,
		3.0, // 1
		4.0,
		5.0  // 0
	]);
	y = new Float64Array([
		6.0, // 2
		7.0, // 1
		8.0, // 0
		9.0,
		10.0
	]);
	N = 2;

	drot( N, x, -1, y, 2, 0.707, 0.707 );

	xe = new Float64Array( [ 6.363, 5.656, 3.0, 4.0, 5.0 ] );
	ye = new Float64Array( [ 2.828, 7.0, 4.949, 9.0, 10.0 ] );
	for ( k = 0; k < xe.length; k++ ) {
		if ( x[ k ] === xe[ k ] ) {
			t.strictEqual( x[ k ], xe[ k ], 'returns expected value' );
		}
		else {
			delta = abs( x[ k ] - xe[ k ] );
			tol = 1.0 * EPS * abs( xe[ k ] );
			t.ok( delta <= tol, 'within tolerance. x: '+x[ k ]+'. expected: '+xe[ k ]+'. delta: '+delta+'. tol: '+tol+'.' );
		}
		if ( y[ k ] === ye[ k ] ) {
			t.strictEqual( y[ k ], ye[ k ], 'returns expected value' );
		}
		else {
			delta = abs( y[ k ] - ye[ k ] );
			tol = 1.0 * EPS * abs( ye[ k ] );
			t.ok( delta <= tol, 'within tolerance. x: '+y[ k ]+'. expected: '+ye[ k ]+'. delta: '+delta+'. tol: '+tol+'.' );
		}
	}
	t.end();
});

tape( 'the function supports complex access patterns', function test( t ) {
	var delta;
	var tol;
	var xe;
	var ye;
	var k;
	var x;
	var y;
	var N;

	x = new Float64Array([
		1.0, // 0
		2.0,
		3.0, // 1
		4.0,
		5.0, // 2
		6.0
	]);
	y = new Float64Array([
		7.0,  // 2
		8.0,  // 1
		9.0,  // 0
		10.0,
		11.0,
		12.0
	]);
	N = 2;

	drot( N, x, 2, y, -1, 0.707, 0.707 );

	xe = new Float64Array( [ 6.363, 2.0, 7.07, 4.0, 5.0, 6.0 ] );
	ye = new Float64Array( [ 2.828, 4.949, 9.0, 10.0, 11.0, 12.0 ] );
	for ( k = 0; k < xe.length; k++ ) {
		if ( x[ k ] === xe[ k ] ) {
			t.strictEqual( x[ k ], xe[ k ], 'returns expected value' );
		}
		else {
			delta = abs( x[ k ] - xe[ k ] );
			tol = 1.0 * EPS * abs( xe[ k ] );
			t.ok( delta <= tol, 'within tolerance. x: '+x[ k ]+'. expected: '+xe[ k ]+'. delta: '+delta+'. tol: '+tol+'.' );
		}
		if ( y[ k ] === ye[ k ] ) {
			t.strictEqual( y[ k ], ye[ k ], 'returns expected value' );
		}
		else {
			delta = abs( y[ k ] - ye[ k ] );
			tol = 1.0 * EPS * abs( ye[ k ] );
			t.ok( delta <= tol, 'within tolerance. x: '+y[ k ]+'. expected: '+ye[ k ]+'. delta: '+delta+'. tol: '+tol+'.' );
		}
	}
	t.end();
});
