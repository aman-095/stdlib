/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var resolve = require( 'path' ).resolve;
var tape = require( 'tape' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var PINF = require( '@stdlib/constants/float64/pinf' );
var NINF = require( '@stdlib/constants/float64/ninf' );
var tryRequire = require( '@stdlib/utils/try-require' );


// VARIABLES //

var gcd = tryRequire( resolve( __dirname, './../lib/native.js' ) );
var opts = {
	'skip': ( gcd instanceof Error )
};


// TESTS //

tape( 'main export is a function', opts, function test( t ) {
	t.ok( true, __filename );
	t.strictEqual( typeof gcd, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function returns `NaN` if either argument is `NaN`', opts, function test( t ) {
	var v;

	v = gcd( NaN, 10 );
	t.strictEqual( isnan( v ), true, 'returns NaN' );

	v = gcd( 10, NaN );
	t.strictEqual( isnan( v ), true, 'returns NaN' );

	v = gcd( NaN, NaN );
	t.strictEqual( isnan( v ), true, 'returns NaN' );

	t.end();
});

tape( 'the function returns `NaN` if either argument is `+infinity`', opts, function test( t ) {
	var v;

	v = gcd( PINF, 10 );
	t.strictEqual( isnan( v ), true, 'returns NaN' );

	v = gcd( 10, PINF );
	t.strictEqual( isnan( v ), true, 'returns NaN' );

	v = gcd( PINF, PINF );
	t.strictEqual( isnan( v ), true, 'returns NaN' );

	t.end();
});

tape( 'the function returns `NaN` if either argument is `-infinity`', opts, function test( t ) {
	var v;

	v = gcd( NINF, 10 );
	t.strictEqual( isnan( v ), true, 'returns NaN' );

	v = gcd( 10, NINF );
	t.strictEqual( isnan( v ), true, 'returns NaN' );

	v = gcd( NINF, NINF );
	t.strictEqual( isnan( v ), true, 'returns NaN' );

	t.end();
});

tape( 'the function returns `NaN` if either argument is not an integer value', opts, function test( t ) {
	var v;

	v = gcd( 3.14, 10.0 );
	t.strictEqual( isnan( v ), true, 'returns NaN' );

	v = gcd( 10.0, 3.14 );
	t.strictEqual( isnan( v ), true, 'returns NaN' );

	v = gcd( 3.14, 6.18 );
	t.strictEqual( isnan( v ), true, 'returns NaN' );

	t.end();
});

tape( 'the function computes the greatest common divisor', opts, function test( t ) {
	var v;

	v = gcd( 0.0, 0.0 );
	t.strictEqual( v, 0.0, 'returns 0' );

	v = gcd( 1.0, 0.0 );
	t.strictEqual( v, 1.0, 'returns 1' );

	v = gcd( 0.0, 1.0 );
	t.strictEqual( v, 1.0, 'returns 1' );

	v = gcd( 6.0, 4.0 );
	t.strictEqual( v, 2.0, 'returns 2' );

	v = gcd( 6.0, -4.0 );
	t.strictEqual( v, 2.0, 'returns 2' );

	v = gcd( -6.0, -4.0 );
	t.strictEqual( v, 2.0, 'returns 2' );

	v = gcd( 15.0, 20.0 );
	t.strictEqual( v, 5.0, 'returns 5' );

	v = gcd( 20.0, 15.0 );
	t.strictEqual( v, 5.0, 'returns 5' );

	v = gcd( 35.0, -21.0 );
	t.strictEqual( v, 7.0, 'returns 7' );

	v = gcd( 48.0, 18.0 );
	t.strictEqual( v, 6.0, 'returns 6' );

	t.end();
});

tape( 'the function supports providing large integers (>= 2**31 - 1)', opts, function test( t ) {
	var TWO_56 = 72057594037927936.0;
	var TWO_53 = 9007199254740992.0;
	var v;

	v = gcd( TWO_56, 0.0 );
	t.strictEqual( v, TWO_56, 'returns 2**56' );

	v = gcd( 0.0, TWO_53 );
	t.strictEqual( v, TWO_53, 'returns 2**53' );

	// Verified on Wolfram Alpha:
	v = gcd( TWO_56, TWO_53 );
	t.strictEqual( v, TWO_53, 'returns 2**53' );

	// Verified on Wolfram Alpha:
	v = gcd( TWO_56, 73453.0 );
	t.strictEqual( v, 1.0, 'returns 1' );

	// Verified on Wolfram Alpha:
	v = gcd( TWO_56, 3491832.0 );
	t.strictEqual( v, 8.0, 'returns 8' );

	// Verified on Wolfram Alpha:
	v = gcd( 3491832.0, TWO_56 );
	t.strictEqual( v, 8.0, 'returns 8' );

	t.end();
});
